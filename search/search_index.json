{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"1.%20TypeScript/1.%20Setup/","title":"1. Setup","text":""},{"location":"1.%20TypeScript/1.%20Setup/#apa-itu-typescript","title":"Apa itu TypeScript?","text":"<ol> <li>TypeScript menambahkan sintaks tambahan ke JavaScript untuk mendukung integrasi yang lebih erat dengan editor Anda. Hal ini memungkinkan untuk menangkap kesalahan secara dini di dalam editor Anda.</li> <li>Kode TypeScript akan diubah menjadi JavaScript ketika dijalankan di mana pun baik itu di browser maupun di server.</li> <li>TypeScript membuat JavaScript dapat menggunakan static typing yang berarti tipe data variabel harus ditentukan saat deklarasi, sehingga lebih aman dan mudah dideteksi jika ada kesalahan</li> </ol> <p>Sumber : https://www.typescripttutorial.net/typescript-tutorial/what-is-typescript/</p>"},{"location":"1.%20TypeScript/1.%20Setup/#mengapa-harus-mengguakan-typescript","title":"Mengapa harus mengguakan TypeScript?","text":""},{"location":"1.%20TypeScript/1.%20Setup/#tujuan-utama-mengguakna-typescript","title":"Tujuan Utama mengguakna TypeScript ?","text":"<ol> <li>TypeScript meningkatkan produktivitas dengan membantu menghindari kesalahan (bug) dalam pengembangan perangkat lunak.</li> <li>TypeScript membawa fitur-fitur JavaScript masa depan ke saat ini.</li> </ol>"},{"location":"1.%20TypeScript/1.%20Setup/#setup-typescript","title":"Setup TypeScript","text":"<ol> <li>Install Node.js (https://nodejs.org/en)</li> <li>Install Kompiler TypeScript</li> </ol> <pre><code>npm install -g typescript\ntsc --v\nnpm install -g ts-node\nnpm install -g nodemon\nnpm init\ntsc --init\n</code></pre> <ol> <li>Konfigurasi Basic File tsconfig.json</li> </ol> <pre><code>{\n\"compilerOptions\": {\n...\n\"rootDir\": \"./src\",\n\"outDir\": \"./build\",\n\"noEmitOnError\": true,\n...\n},\n\"include\": [\"src\"]\n}\n</code></pre> <ol> <li>Konfigurasi File package.json</li> </ol> <pre><code>{\n\"name\": \"typescript\",\n\"version\": \"1.0.0\",\n\"description\": \"\",\n\"main\": \"index.js\",\n\"scripts\": {\n\"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",\n\"build\" : \"tsc -w\",\n\"dev\" : \"nodemon src/index.ts\"\n},\n\"author\": \"\",\n\"license\": \"ISC\"\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/1.%20Instalasi/","title":"1. Instalasi","text":""},{"location":"2.%20NestJS%20-%20Backend/1.%20Instalasi/#1-apa-itu-nestjs","title":"1. Apa itu NestJs ?","text":"<p>NestJS adalah sebuah framework untuk membuat aplikasi server-side (back-end) dengan menggunakan bahasa pemrograman TypeScript, yang dibangun di atas platform Node.js.</p> <p>NestJS memiliki konsep arsitektur yang terinspirasi dari Angular, yaitu menggunakan Dependency Injection, module, dan controller. NestJS juga menyediakan fitur-fitur yang berguna untuk memudahkan pengembangan aplikasi seperti middleware, pipes, guards, interceptors, dan lain-lain. Selain itu, NestJS juga dapat digunakan dengan berbagai database seperti MySQL, PostgreSQL, MongoDB, dan sebagainya.</p> <p></p> <p>Dokumentasi resmi : https://nestjs.com/</p>"},{"location":"2.%20NestJS%20-%20Backend/1.%20Instalasi/#2-instalasi-project-nestjs","title":"2. Instalasi Project NestJS","text":"<p>Sebelum memulai mempelajari NestJs ada beberapa tools yang harus dipersiapkan</p>"},{"location":"2.%20NestJS%20-%20Backend/1.%20Instalasi/#a-instalasi-nodejs-dan-npm","title":"a. Instalasi nodejs dan npm","text":"<pre><code>node -v\nnpm -v\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/1.%20Instalasi/#b-instalasi-nest-cli","title":"b. Instalasi Nest CLI","text":"<pre><code>npm install -g @nestjs/cli\nnest --help\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/1.%20Instalasi/#c-instalasi-postman","title":"c. Instalasi Postman","text":"<p>Postman adalah aplikasi yang digunakan untuk pengujian api / service pada BE Download <code>https://www.postman.com/downloads/</code></p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/1.%20Instalasi/#3-buat-project-nestjs","title":"3. Buat Project NestJS","text":"<p>Pertama Kali untuk membuat Project NestJS , kita akan membuat folder baru kemudian kita akan buka dengan Visual Code Studio <pre><code>ihsanabuhanifah@ihsanabnifahMBP FullstackDev % nest new backend-nestjs\n\u26a1  We will scaffold your app in a few seconds..\n\nCREATE backend-nestjs/.eslintrc.js (665 bytes)\nCREATE backend-nestjs/.prettierrc (51 bytes)\nCREATE backend-nestjs/README.md (3340 bytes)\nCREATE backend-nestjs/nest-cli.json (118 bytes)\nCREATE backend-nestjs/package.json (1999 bytes)\nCREATE backend-nestjs/tsconfig.build.json (97 bytes)\nCREATE backend-nestjs/tsconfig.json (546 bytes)\nCREATE backend-nestjs/src/app.controller.spec.ts (617 bytes)\nCREATE backend-nestjs/src/app.controller.ts (274 bytes)\nCREATE backend-nestjs/src/app.module.ts (249 bytes)\nCREATE backend-nestjs/src/app.service.ts (142 bytes)\nCREATE backend-nestjs/src/main.ts (208 bytes)\nCREATE backend-nestjs/test/app.e2e-spec.ts (630 bytes)\nCREATE backend-nestjs/test/jest-e2e.json (183 bytes)\n\n? Which package manager would you \u2764\ufe0f  to use? npm\n\u25b9\u25b8\u25b9\u25b9\u25b9 Installation in progress... \u2615\n</code></pre> kita tinggal penunggu sampai proses intalasi selesai.  Setelah selesai proses instalasi, kemudian jalankann npm run dev:start untuk memulai proses intalasi</p> <p><pre><code>npm run dev:start\n</code></pre> 1aNnE0qsmYTVckefybYyxa8P4OYKgEd3i</p> <p></p> <p>Apabila dibuka pada browser maka akan tampil sebagai berikut.</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/","title":"2. Struktur NestJS","text":""},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#1-struktur-folder-nestjs","title":"1. Struktur Folder NestJS","text":"<p>Pada saat pertama kali install Nest JS di project , maka akan mendapatkan seperti gambar di atas.</p>"},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#a-dist","title":"a. dist","text":"<p>folder dist merupakan hasil compile dari typescript ke javascript dari folder src , folder dist akan muncul ketika kita jalankan</p> <pre><code>npm run start:dev\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#b-node_module","title":"b. node_module","text":"<p>node_module berisi depedencies yang di install pada project kita</p>"},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#c-src","title":"c. src","text":"<p>folder src adalah lokasi dimana kita akan melakuakn proses koding, di dalam folder src secara default terdapat beberapa file</p> <ul> <li>`app.controller.ts`` yang digunakan sebagai controller dan juga sebagai Routing yang berhubungan langsung dengan Client</li> <li><code>app.service.ts</code> adalah service yang di panggil oleh Controller dan berisi logic - logic</li> <li><code>app.module.ts</code> adalah configurasi yang menampung Controller dan Service</li> <li><code>app.controller.spec.ts</code> adalah Unit Testing untuk controller yang digunakan untuk melakukan test pada controller</li> <li><code>main.ts</code> adalah file yang menjalankan Nest JS diatas Express JS maupun Fastify</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#e-test","title":"e. test","text":"<p>Folder test merupakan folder yang berisi file untuk melakukan testing, secara default folder test terdapat file</p> <ul> <li><code>app.e2e-spec.ts</code> adalah file untuk melakukan End to End Testing terhadap Controller melalui HTTP</li> <li><code>jest-e2e.json</code> adalah file configurasi End to End Testing yang menggunakan Jest secara defaultnya.</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#ffile-eslintrcjs","title":"f.file eslintrc.js","text":"<p>file eslintrc.js merupakan default dari eslint, dimana kita dapat mengkonfigurasi sesuai kebutuhan</p>"},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#g-gitignore","title":"g. .gitignore","text":"<p>.gitignore merupakan file untuk mendefiniskan file atau folder mana saya yang tidak akan kita push ke dalam github/gitlab</p>"},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#h-nest-clijson","title":"h. nest-cli.json","text":"<p>nest-cli.json  merupakan file konfigurasi untuk nest cli</p>"},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#i-packagejson","title":"i. package.json","text":""},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#2-konsep-modular-dan-service-pattern","title":"2. Konsep Modular dan Service Pattern","text":""},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#a-apa-itu-modular","title":"a. Apa itu Modular?","text":"<p>Pada NestJS, <code>modular</code> mengacu pada pendekatan organisasi kode yang membagi aplikasi menjadi modul-modul terpisah. Pendekatan ini membantu dalam mengatur, memisahkan, dan mempermudah pengembangan aplikasi yang lebih kompleks.</p> <p>Penamaan Module tidak terbatas, dan kita bisa menyesuaikan dengan kebutuhan dan di dalam module bisa ada module lain dan seterusnya.</p> <p>Berikut ini adalah contoh gambar Module</p> <p></p> <p>Pada gambar diatas, terlihat bahwa module bisa memiliki child module lain, dan setiap module bisa berinteraksi dengan module lain sehingga setiap module bisa menggunakan service dari module lain seperti gambar di bawah ini:</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#b-apa-itu-service-pattern","title":"b. Apa itu Service Pattern?","text":"<p>Service Pattern pada nestjs adalah bahwa setiap module memili Module, Controller, dan Service. Selain Pattern tersebut kita juga dapat membuat pattern lain sesuai dengan kebutuhan</p> <p></p> <p>Pada gambar diatas terlihat bahwa pola di dalam module bisa berbeda - beda, misal ada module yang digunakan untuk Routing dengan menggunakan Controller dan ada juga Module yang diginakan tanpa Controller</p>"},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#c-mengubah-port-default","title":"c. Mengubah port Default","text":"<p>Secata default aplikasi nestjs akan berjalan pada port 3000 , namun kita dapat merubah port default dari aplikasi nestjs dengan port lain.</p> <p>untuk merubah port default kita bisa berubah pada file main.ts</p> <p><pre><code>import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(5002); // ubah dari 3000 menjadi 5002\n}\nbootstrap();\n</code></pre> </p>"},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#d-basic-routing-pada-nestjs","title":"d. Basic Routing pada NestJS","text":"<p>Pada contoh sebelumnya kita sudah mencoba routing default pada url http://localhost:5002. Selanjutkan kita akan coba untuk membuat routing sederhana pada aplikasi nestjs.</p> <p>Routing pada NestJs sangat mudah, yaitu pada file controller pada setiap module.</p> <p><pre><code>import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('belajar-route')\n  getHello2(): string {\n    return 'Belajar Routing';\n  }\n}\n</code></pre> pada contoh di atas kita membuat routing pada url <code>http://localhost:5002/belajar-route</code> yang akan menampilkan pesan Belajar-Routing, sehingga akan tampil seperti gambar di bawah</p> <p></p> <p>Untuk materi routing yang lain nya kita akan bahas pada materi selanjutnya.</p>"},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/1.%20module/","title":"A. NestJs Module","text":""},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/1.%20module/#1-apa-itu-module","title":"1. Apa itu Module?","text":"<ul> <li>Module merupakan sebuah class yang digunakan untuk mengelompokan fitur yang sama</li> <li>Nest JS wajib memiliki minimal satu module, setidaknya root module</li> <li>Setiap module diletakan pada sebuah folder agar struktur project menjadi rapih</li> <li>module merupakan singleton artinya instance dari object adalah satu namun bisa digunakan berkali-kali</li> </ul> <p>Module pada NestJS dibuat menggunakan decorator <code>@Module()</code> pada class, docorator <code>@Module()</code> bertugas untuk memberikan metadata pada module yang digunakan oleh NestJS untuk mengorganisasi project.</p> <p>app.module.ts</p> <pre><code>@Module({\ncontrollers: [AppController],\nproviders: [AppService],\n})\nexport class AppModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/1.%20module/#2-property-pada-module","title":"2. Property pada Module","text":"Property Deskripsi providers Kumpulan provider yang akan dibuat oleh NestJS injector yang bisa dishare diseluruh module controllers Kumpulan contoller yang akan digunakan pada modul imports Daftar module yang ingin kita gunakan fiturnya dari module lain, dengan syarat module/service/fitur nya harus sudah di export di module asal exports Kumpulan provider/fitur/service yang akan di export. Fitur ini nantinya akan di import module lain"},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/1.%20module/#3-bagaimana-module-di-nestjs","title":"3. Bagaimana Module di NestJS?","text":""},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/1.%20module/#a-nestjs-default-module","title":"a. NestJS Default Module","text":""},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/1.%20module/#b-shared-module","title":"b. Shared Module","text":""},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/1.%20module/#4-latihan-membuat-module","title":"4. Latihan Membuat Module","text":"<p>Pada latihan kali ini, kita akan membuat module menggunakan nest cli</p> <pre><code>npx nest g module latihan\n</code></pre> <p>Jika berhasil maka akan muncul message seperti di bawah</p> <pre><code>ihsanabuhanifah@ihsanabuhanifah-MacBook-Pro backend-nestjs % npx nest g module latihan\nCREATE src/latihan/latihan.module.ts (84 bytes)\nUPDATE src/app.module.ts (320 bytes)\n</code></pre> <p>pada saat kita membuat module menggunakan Nest CLI, maka module akan otomatis terimport ke dalam Root App Module</p> <pre><code>import { Module } from \"@nestjs/common\";\nimport { AppController } from \"./app.controller\";\nimport { AppService } from \"./app.service\";\nimport { LatihanModule } from \"./latihan/latihan.module\"; // otomatis terimport kesini\n@Module({\nimports: [LatihanModule], // Secara otomatis akan\ncontrollers: [AppController],\nproviders: [AppService],\n})\nexport class AppModule {}\n</code></pre> <p>Kemudian kita akan melihat folder latihan dan latihan.module.ts seperti gambar berikut</p> <p></p> <p>Kemudian ketika kita membuka file module latihan.module.ts</p> <pre><code>import { Module } from \"@nestjs/common\";\n@Module({})\nexport class LatihanModule {}\n</code></pre> <p>Sampai tahap ini kita sudah berhasil membuat module dengan nest cli, Selanjutnya silahkan latihan membuat module.</p>"},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/2.%20controller/","title":"B. NestJs Controller","text":""},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/2.%20controller/#1-apa-itu-controller","title":"1. Apa itu Controller?","text":"<ul> <li>Controller bertugas untuk menerima request dari client dan memberikan response ke cliet</li> <li>Setiap controller bertugas untuk menerima data dari endpoint tertentu, seperti \"/latihan\" dengan method tertentu sepert GET, POST, PATCH, PUT, dan DELETE</li> <li>Controller akan menggunakan provider yang telah didaftarkan pada module</li> <li>Pada NestJS controller diberikan decorator <code>@Controller()</code> pada class</li> <li>Parameter yang di isi pada decorator <code>@Controller()</code> adalah string base path dari controller tersebut</li> <li>Controller dapat dibuat dengan cara manual atau menggunakan Nest CLI</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/2.%20controller/#2-bagaimana-cara-kerja-controller","title":"2. Bagaimana cara kerja Controller","text":"<p>Ketika kita mengguanakn NestJS untuk aplikasi yang kita buat, secara default kita kan menggunakan service pattern seperti gambar di bawah</p> <p></p> <p>atau dapat juga menggunakan service pattern</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/2.%20controller/#3-latihan-membuat-controller","title":"3. Latihan membuat controller","text":"<p>Pada latihan kali ini kita akan membuat controller dan mempelajari basic-basic yang controller</p> <pre><code>npx nest g controller latihan\n</code></pre> <p>Jika berhasil kita akan melihat pesan seperti di bawah</p> <pre><code>ihsanabuhanifah@ihsanabuhanifah-MacBook-Pro backend-nestjs % npx nest g controller latihan\nCREATE src/latihan/latihan.controller.spec.ts (499 bytes)\nCREATE src/latihan/latihan.controller.ts (103 bytes)\nUPDATE src/latihan/latihan.module.ts (178 bytes)\nihsanabuhanifah@ihsanabuhanifah-MacBook-Pro backend-nestjs %\n</code></pre> <p></p> <p>Dari pesan tersebut kita melihat nest cli sudah membuat file baru dengan nama latihan.controller.ts</p> <pre><code>import { Controller } from \"@nestjs/common\";\n@Controller(\"latihan\")\nexport class LatihanController {}\n</code></pre> <p>kemudian secara otomatis controller juga terimport otomatis pada file latihan.module.ts</p> <pre><code>import { Module } from \"@nestjs/common\";\nimport { LatihanController } from \"./latihan.controller\"; //disini\n@Module({\ncontrollers: [LatihanController], // disini\n})\nexport class LatihanModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/2.%20controller/#4-membuat-routing-pada-controller","title":"4. Membuat Routing pada controller","text":"<p>Selanjutnya kita akan membuat routing sederhana pada controller, dan kita akan menggunakan <code>postman</code> sebagai aplikasi pengujian routing yang kita buat</p> <p>Method GET</p> <pre><code>import { Controller, Get } from \"@nestjs/common\"; //import Get\n@Controller(\"latihan\") // base url\nexport class LatihanController {\n@Get()\nfindAll() {\nreturn {\nmethod: 'GET',\n};\n}\n}\n</code></pre> <p></p> <p>Method GET dengan parameter id</p> <pre><code>import { Controller, Get, Param } from '@nestjs/common'; //import Get\n@Controller('latihan') // base url\nexport class LatihanController {\n@Get()\nfindAll() {\nreturn {\nmethod: 'GET',\n};\n}\n@Get('detail/:id')\nfindById(@Param('id') id: string) {\nreturn {\nmethod: 'GET',\nparam: {\nid: id,\n},\n};\n}\n}\n</code></pre> <p></p> <p>Method POST</p> <pre><code>import { Body, Controller, Get, Param, Post } from '@nestjs/common'; //import Post\ninterface payloadDto {\nname: string;\nage: number;\n}\n@Controller('latihan') // base url\nexport class LatihanController {\n@Get()\nfindAll() {\nreturn {\nmethod: 'GET',\n};\n}\n@Get('detail/:id')\nfindById(@Param('id') id: string) {\nreturn {\nmethod: 'GET',\nparam: {\nid: id,\n},\n};\n}\n@Post('/create')\ncreate(@Body() payload: payloadDto) {\nconst { name, age } = payload;\nreturn {\nmethod: 'POST',\nbody: {\nname: name,\nage: age,\n},\n};\n}\n}\n</code></pre> <p></p> <p>Method PUT</p> <pre><code>...\n@Put('/update/:id')\nupdate(@Param('id') id: string, @Body() payload: payloadDto) {\nreturn {\nmethod: 'PUT',\nparam: {\nid: id,\n},\nbody: payload,\n};\n}\n</code></pre> <p></p> <p>Method DELETE <pre><code>...\n@Delete('delete/:id')\ndelete(@Param('id') id: string) {\nreturn {\nmethod: 'DELETE',\nparam: {\nid: id,\n},\n};\n}\n</code></pre></p> <p></p> <p>Method GET dengan query string <pre><code>import {\nBody,\nController,\nDelete,\nGet,\nParam,\nPost,\nPut,\nQuery,\n} from '@nestjs/common';\n...\ninterface QueryLatihanDto {\nname?: string;\nage_start?: number;\nage_end?: number;\n}\n@Controller('latihan') // base url\nexport class LatihanController {\n@Get()\nfindAll(@Query() query: QueryLatihanDto) {\nreturn {\nmethod: 'GET',\nquery: query,\n};\n}\n...\n}\n</code></pre></p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/3.%20provider/","title":"C. NestJs Provider","text":""},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/3.%20provider/#1-apa-itu-provider","title":"1. Apa itu Provider?","text":"<ul> <li>Provider digunakan sebagai service, repository, factory, helper, dan lain-lain</li> <li>NestJS akan meng-inject provider ke module yang menggunakan provider tersebut Depedency Injection sehingga provider dapat digunakan oleh seluruh module</li> <li>Pada NestJS provider diberikan decorator <code>@Injactable()</code> pada class</li> </ul> <p>app.service.tsx</p> <pre><code>import { Injectable } from '@nestjs/common';\n@Injectable()\nexport class AppService {\ngetHello(): string {\nreturn 'Hello World!';\n}\n}\n</code></pre> <p>app.module.tsx</p> <pre><code>import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { LatihanModule } from './latihan/latihan.module';\n@Module({\nimports: [LatihanModule],\ncontrollers: [AppController],\nproviders: [AppService],\n})\nexport class AppModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/3.%20provider/#2-latihan-membuat-provider","title":"2. Latihan membuat Provider","text":"<p>Pada latihan kali ini kita akan membuat provider yaitu service. Service adalah class yang digunakan untuk menaruh logic - logic yang di panggil oleh controller maupun service lain.</p> <p></p> <p>Seperti contoh gambar di atas dimana service akan menghubungkan antara contoller dengan model dan database, sehingga pada service kita bisa membuat logic untuk menyimpan data , menghapus data, mengupdate data dan menampilkan data</p> <p>untuk membuat service di nestjs kita bisa menggukakan nest cli seperti berikut</p> <pre><code>npx nest g service latihan\n</code></pre> <p>Jika berhasil maka kita akan mendapatkan pesan seperti di bawah <pre><code>ihsanabuhanifah@ihsanabuhanifah-MacBook-Pro backend-nestjs % npx nest g service latihan           \nCREATE src/latihan/latihan.service.spec.ts (467 bytes)\nCREATE src/latihan/latihan.service.ts (91 bytes)\nUPDATE src/latihan/latihan.module.ts (262 bytes)\nihsanabuhanifah@ihsanabuhanifah-MacBook-Pro backend-nestjs %\n</code></pre></p> <p></p> <p>Dari pesan tersebut kita melihat nest cli sudah membuat file baru dengan nama latihan.service.ts <pre><code>import { Injectable } from '@nestjs/common';\n@Injectable()\nexport class LatihanService {}\n</code></pre></p> <p>kemudian secara otomatis controller juga terimport otomatis pada file latihan.module.ts</p> <pre><code>import { Module } from '@nestjs/common';\nimport { LatihanController } from './latihan.controller';\nimport { LatihanService } from './latihan.service';\n@Module({\ncontrollers: [LatihanController],\nproviders: [LatihanService],\n})\nexport class LatihanModule {}\n</code></pre> <p>Selanjutkan kita akan latihan untuk membuat service yang akan di panggil di controller. Pertama kita akan buat service dengan nama getLatihan pada latihan.service.ts seperti berikut <pre><code>import { Injectable } from '@nestjs/common';\n@Injectable()\nexport class LatihanService {\ngetLatihan(): string {\nreturn 'latihan';\n}\n}\n</code></pre></p> <p>Kemudian service tersebut kita akan panggil pada controller dengan mengguankan <code>Dependency injection</code></p> <p><code>constructor(private latihanService: LatihanService) {}</code></p> <p>sehingga seperti code di bawah <pre><code>import {\nBody,\nController,\nDelete,\nGet,\nParam,\nPost,\nPut,\nQuery,\n} from '@nestjs/common'; //import Get\nimport { LatihanService } from './latihan.service';\ninterface payloadDto {\nname: string;\nage: number;\n}\ninterface QueryLatihanDto {\nname?: string;\nage_start?: number;\nage_end?: number;\n}\n@Controller('latihan') // base url\nexport class LatihanController {\nconstructor(private latihanService: LatihanService) {}\n@Get('/list')\ngetLatihan() {\nreturn this.latihanService.getLatihan(); // arti kode ini ketika routing di panggil maka function getLatihan pada controll akan memanggil service getLatihan \n}\n...\n}\n</code></pre></p> <p>Kemudian kita tes di postman sebagai berikut</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/1.%20membuat_api/","title":"A. Membuat REST API","text":"<p>Pada Materi ini kita akan berlatih untuk membuat rest api dengan database sementara berupa array. Setelah latihan ini diharapkan peserta didik dapat lebih memahami workflow ketika membuat endponint rest api dari NestJs.</p> <p>Kita akan berlatih untuk membuat rest api yang bertujuan untuk menambah data , menghapus data, mengupdate data, dan menampilkan data. Adapun studi kasus kita adalah menambah, menghapus, mengupdate dan menampilkan buku.</p> <p>Adapun tipe data untuk array books adalah seperti berikut</p> <pre><code>const books = {\nid : number,\ntitile : string,\nauthor : string,\nyear : number\n}[]\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/1.%20membuat_api/#1-membuat-module-service-dan-controller-book","title":"1. Membuat Module, Service dan Controller Book","text":"<pre><code>ihsanabuhanifah@ihsanabuhanifah-MacBook-Pro backend-nestjs % npx nest g mo book\nihsanabuhanifah@ihsanabuhanifah-MacBook-Pro backend-nestjs % npx nest g service  book\nihsanabuhanifah@ihsanabuhanifah-MacBook-Pro backend-nestjs % npx nest g controller  book\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/1.%20membuat_api/#2-membuat-property-book-pada-service-dan-membuat-service-getallbook","title":"2. Membuat property book pada Service dan membuat service getAllBook","text":"<p>book.service.ts</p> <pre><code>import { Injectable } from \"@nestjs/common\";\n@Injectable()\nexport class BookService {\nprivate books: {\nid?: number;\ntitle: string;\nauthor: string;\nyear: number;\n}[] = [\n{\nid: 1,\ntitile: \"HTML CSS\",\nauthor: \"ihsanabuhanifah\",\nyear: 2023,\n},\n];\ngetAllBooks(): {\nid?: number;\ntitle: string;\nauthor: string;\nyear: number;\n}[] {\nreturn this.books;\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/1.%20membuat_api/#3-inject-service-ke-dalam-controller-dan-membuat-routing-get","title":"3. Inject Service ke dalam Controller dan membuat routing Get","text":"<p>book.controller.ts</p> <pre><code>import { Controller, Get } from \"@nestjs/common\";\nimport { BookService } from \"./book.service\";\n@Controller(\"book\")\nexport class BookController {\nconstructor(private bookService: BookService) {}\n@Get(\"/list\")\nfindAllBook() {\nreturn this.bookService.getAllBooks();\n}\n}\n</code></pre> <p>Selanjutkan kita akan uji pada postman untuk menampilkan seluruh buku pada array books</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/1.%20membuat_api/#4-membuat-api-create-book","title":"4. Membuat api create book","text":"<p>book.service.ts</p> <pre><code>...\ncreateBook(\ntitle: string,\nauthor: string,\nyear: number,\n): {\nstatus: string;\nmessage: string;\n} {\nthis.books.push({\nid: new Date().getTime(),\ntitle: title,\nauthor: author,\nyear: year,\n});\nreturn {\nstatus: 'Success',\nmessage: 'Berhasil menambakan buku',\n};\n}\n...\n</code></pre> <p>book.controller.ts</p> <pre><code>...\n@Post('/create')\ncreateBook(\n@Body('title') title: string,\n@Body('author') author: string,\n@Body('year') year: number,\n) {\nreturn this.bookService.createBook(title, author, year);\n}\n...\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/1.%20membuat_api/#a-pengujian-ketika-create","title":"a. Pengujian ketika create","text":""},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/1.%20membuat_api/#b-pengujian-ketika-get","title":"b. Pengujian ketika get","text":""},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/1.%20membuat_api/#5-membuat-api-get-detail-by-id","title":"5. Membuat api get detail by id","text":"<p>book.service.ts</p> <pre><code> findBookById(id: number): number {\nconst bookIndex = this.books.findIndex((book) =&gt; book.id === id);\nif (bookIndex === -1) {\nthrow new NotFoundException(`Buku dengan id ${id} tidak ditemukan`);\n}\nreturn bookIndex;\n}\ngetDetail(id: number): {\nid?: number;\ntitle: string;\nauthor: string;\nyear: number;\n} {\nconst bookIndex = this.findBookById(id);\nconst book = this.books[bookIndex];\nreturn book;\n}\n</code></pre> <p>pada koding di atas, kita membaut method findBookById sebagai method yang akan di panggil pada method lain yang bertujuan untuk mencari index ke berapa berdasarkan id buku</p> <p>book.controller.ts</p> <pre><code>...\n@Get('detail/:id')\nfindOneBook(@Param('id') id: string) {\nreturn this.bookService.getDetail(Number(id));\n}\n...\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/1.%20membuat_api/#a-pengujian-detail-by-id","title":"a. Pengujian detail by Id","text":""},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/1.%20membuat_api/#6-membuat-api-update-buku","title":"6. Membuat api update buku","text":"<p>book.service.ts</p> <pre><code>...\nupdateBook(\nid: number,\ntitle: string,\nauthor: string,\nyear: number,\n): {\nstatus: string;\nmessage: string;\n} {\nconst bookIndex = this.books.findIndex((book) =&gt; book.id === id);\nthis.books[bookIndex].title = title;\nthis.books[bookIndex].author = author;\nthis.books[bookIndex].year = year;\nreturn {\nstatus: 'Success',\nmessage: 'Berhasil update buku',\n};\n}\n...\n</code></pre> <p>book.controller.ts</p> <pre><code>...\n@Put('update/:id')\nupdateBook(\n@Param('id') id: string,\n@Body('title') title: string,\n@Body('author') author: string,\n@Body('year') year: number,\n) {\nreturn this.bookService.updateBook(Number(id), title, author, year);\n}\n...\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/1.%20membuat_api/#a-pengujian-update-buku","title":"a. Pengujian update buku","text":""},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/1.%20membuat_api/#7-menghapus-api-delete-buku","title":"7. Menghapus api delete buku","text":"<p>book.service.ts</p> <p><pre><code>...\ndeleteBook(id: number): {\nstatus: string;\nmessage: string;\n} {\nconst bookIndex = this.findBookById(id);\nthis.books.splice(bookIndex, 1);\nreturn {\nstatus: `Success ${bookIndex}`,\nmessage: 'Berhasil menghapus buku',\n};\n}\n...\n</code></pre> book.controller.ts</p> <pre><code>...\n@Delete('delete/:id')\ndeleteBook(@Param('id') id: string) {\nreturn this.bookService.deleteBook(+id);\n}\n...\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/1.%20membuat_api/#a-pengujian-delete-buku","title":"a. Pengujian delete buku","text":""},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/2.dto_response/","title":"B. DTO dan Response Type","text":""},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/2.dto_response/#1-membuat-response-type","title":"1. Membuat Response Type","text":"<p>Pada materi kali ini, kita akan membuat response type agar response dari rest api yang kita bikin standar dan menjaga agar tetap konsisten di semua response pada api.</p> <pre><code>createBook(\ntitle: string,\nauthor: string,\nyear: number,\n): {\nstatus: string;\nmessage: string;\n} {\nthis.books.push({\nid: new Date().getTime(),\ntitle: title,\nauthor: author,\nyear: year,\n});\nreturn {\nstatus: 'Success',\nmessage: 'Berhasil menambakan buku',\n};\n}\nupdateBook(\nid: number,\ntitle: string,\nauthor: string,\nyear: number,\n): {\nstatus: string;\nmessage: string;\n} {\nconst bookIndex = this.books.findIndex((book) =&gt; book.id === id);\nthis.books[bookIndex].title = title;\nthis.books[bookIndex].author = author;\nthis.books[bookIndex].year = year;\nreturn {\nstatus: 'Success',\nmessage: 'Berhasil update buku',\n};\n}\n</code></pre> <p>Perhatikan pada koding di atas, kita sudah menjaga agar response nya tetap konsisten, yaitu pada return harus sebuah object yang memiliki property status dan message. Namun kita lihat pada tiap service kita harus mendefiniskan kembali type data response nya. Tentu hal ini tidak efektif karena kita harus membuatnya berkali-kali.</p> <p>Untuk membuat efektif kode kita maka kita harus membuat type/interface response , sehingga kita cukup memanggil pada setiap service.</p>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/2.dto_response/#a-membuat-interface-responsesuccess","title":"a. Membuat Interface ResponseSuccess","text":"<p>Pertama , bualah folder baru dengan nama interface seperti gambar berikut</p> <p></p> <p>Kedua, buatlah folder response dalam folder interface yang didalamnya terdapat file <code>index.ts</code> dan <code>response.interface.ts</code></p> <p>response.inteface.ts</p> <pre><code>export interface ResponseSuccess {\nstatus: string;\nmessage: string;\ndata?: any;\n}\n</code></pre> <p>index.ts</p> <pre><code>export * from \"./response.interface\";\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/2.dto_response/#b-impelementasi-response-success-pada-service","title":"b. Impelementasi Response Success pada Service","text":"<p>Pada contoh di atas kita membuat bahwa setiap <code>response success</code> harus memiliki property status dan message , kemudian untuk data bersifat optional dengan tipe data any.</p> <p>Kemudian kita akan mencoba bagaimana mengimplementasikannya pada <code>book.service.ts</code></p> <pre><code>import { Injectable, NotFoundException } from '@nestjs/common';\nimport { ResponseSuccess } from 'src/interface/response';\n...\ngetAllBooks(): ResponseSuccess {\nreturn {\nstatus: 'Success',\nmessage: 'List Buku ditermukan',\ndata: this.books,\n};\n}\ngetDetail(id: number): ResponseSuccess {\nconst bookIndex = this.findBookById(id);\nconst book = this.books[bookIndex];\nreturn {\nstatus: 'Success',\nmessage: 'List Buku ditermukan',\ndata: book,\n};\n}\ncreateBook(title: string, author: string, year: number): ResponseSuccess {\nthis.books.push({\nid: new Date().getTime(),\ntitle: title,\nauthor: author,\nyear: year,\n});\nreturn {\nstatus: 'Success',\nmessage: 'Berhasil menambakan buku',\n};\n}\nupdateBook(\nid: number,\ntitle: string,\nauthor: string,\nyear: number,\n): ResponseSuccess {\nconst bookIndex = this.books.findIndex((book) =&gt; book.id === id);\nthis.books[bookIndex].title = title;\nthis.books[bookIndex].author = author;\nthis.books[bookIndex].year = year;\nreturn {\nstatus: 'Success',\nmessage: 'Berhasil update buku',\n};\n}\ndeleteBook(id: number): ResponseSuccess {\nconst bookIndex = this.findBookById(id);\nthis.books.splice(bookIndex, 1);\nreturn {\nstatus: `Success ${bookIndex}`,\nmessage: 'Berhasil menghapus buku',\n};\n}\n...\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/2.dto_response/#2-membuat-dto-data-transfer-object","title":"2. Membuat DTO (Data Transfer Object)","text":"<p>DTO merupakan class yang berisi type data yang bisa digunakan sebagai interface dari data yang dikirim oleh client. Dengan membuat DTO kita bisa mendefinisikan type data yang dikirim oleh client pada contoller dan service. Dengan membuat DTO kita  bisa memastikan bahwa data yang dikirim oleh client sesuai dengan kriteria yang sudah ditentukan.</p>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/2.dto_response/#a-instalasi-nestjsmapped-types","title":"a. Instalasi @nestjs/mapped-types","text":"<pre><code>npm i --save @nestjs/mapped-types\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/2.dto_response/#b-membuat-bookdtots","title":"b. Membuat book.dto.ts","text":"<pre><code>import { OmitType } from \"@nestjs/mapped-types\";\nexport class BookDto {\nid: number;\ntitle: string;\nauthor: string;\nyear: number;\n}\nexport class CreateBookDto extends OmitType(BookDto, [\"id\"]) {}\nexport class UpdateBookDto extends OmitType(BookDto, [\"id\"]) {}\n</code></pre> <p>Pada contoh di atas kita membuat BookDto untuk mendefinikasi seluruh property yang ada pada service book. Kemudian kita membuat <code>CreateBookDto</code> dengan mengecualikan id pada property <code>CreateBookDto</code> dengan OmitType. Kalau kita definisikan dengan cara biasa maka akan seperti di bawah.</p> <pre><code>export class CreateBookDto {\ntitle: string;\nauthor: string;\nyear: number;\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/2.dto_response/#c-implementasikan-dto-pada-controller","title":"c. Implementasikan DTO pada controller","text":"<p>Pada Bagian ini akan coba implementasikan <code>CreateBookDto</code> pada <code>book.controller.ts</code></p> <p>book.controller.ts</p> <pre><code>import {\nBody,\nController,\nDelete,\nGet,\nParam,\nPost,\nPut,\n} from '@nestjs/common';\nimport { BookService } from './book.service';\nimport { CreateBookDto } from './book.dto';\n@Controller('book')\nexport class BookController {\nconstructor(private bookService: BookService) {}\n...\n@Post('/create')\ncreateBook(@Body() payload: CreateBookDto) {\nreturn this.bookService.createBook(payload);\n}\n...\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/2.dto_response/#c-implementasikan-dto-pada-service","title":"c. Implementasikan DTO pada service","text":"<p>Pada Bagian ini akan coba implementasikan <code>CreateBookDto</code> pada <code>book.controller.ts</code></p> <p>book.service.ts</p> <pre><code>import { Injectable, NotFoundException } from '@nestjs/common';\nimport { ResponseSuccess } from 'src/interface/response';\nimport { CreateBookDto } from './book.dto';\n@Injectable()\nexport class BookService {\nprivate books: {\nid?: number;\ntitle: string;\nauthor: string;\nyear: number;\n}[] = [\n{\nid: 1,\ntitle: 'HTML CSS',\nauthor: 'ihsanabuhanifah',\nyear: 2023,\n},\n];\ncreateBook(createBookDto: CreateBookDto): ResponseSuccess {\nconst { title, author, year } = createBookDto;\nthis.books.push({\nid: new Date().getTime(),\ntitle: title,\nauthor: author,\nyear: year,\n});\nreturn {\nstatus: 'Success',\nmessage: 'Berhasil menambakan buku',\n};\n}\n...\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/3.%20validation/","title":"C. Validation","text":""},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/3.%20validation/#1-apa-itu-validation","title":"1. Apa itu Validation?","text":"<p>Validation bertujuan untuk memastikan bahwa data yang dikirimkan atau diterima oleh aplikasi Anda sesuai dengan aturan atau kriteria tertentu sebelum diproses lebih lanjut. Selain itu berikut merupakan tujuan dari Validation</p> <ul> <li> <p><code>Data Integritas</code>: Memastikan bahwa data yang diterima sesuai dengan struktur dan tipe yang diharapkan sehingga tidak menyebabkan kesalahan atau gangguan dalam pemrosesan lebih lanjut.</p> </li> <li> <p><code>Validasi Input</code>: Memvalidasi data masukan dari pengguna atau dari sumber eksternal untuk memastikan bahwa data tersebut sesuai dengan aturan yang ditetapkan. Misalnya, memastikan bahwa sebuah email memiliki format yang benar, atau bahwa nomor telepon hanya berisi angka.</p> </li> <li> <p><code>Keamanan</code>: Menghindari masalah keamanan seperti SQL injection atau penyusupan berdasarkan data yang tidak valid.</p> </li> <li> <p><code>Meningkatkan Pesan Error</code>: Memberikan pesan error yang bermakna dan informatif ketika data tidak valid, sehingga memudahkan pengguna untuk memperbaikinya.</p> </li> <li> <p><code>Dokumentasi</code>: Dengan menggunakan class validator, Anda dapat mendokumentasikan aturan validasi secara eksplisit di level DTO, yang dapat membantu pengembang lain untuk memahami kebutuhan data dan aturan validasi yang berlaku.</p> </li> <li> <p><code>Mengurangi Kesalahan</code>: Dengan melakukan validasi sejak awal, Anda dapat mengidentifikasi dan menangani kesalahan lebih cepat dan lebih mudah sebelum data digunakan dalam proses bisnis yang lebih kompleks.</p> </li> </ul> <p>Ada bebrapa cara yang bisa dilakukan untuk melakukan validasi di NestJS, namun pada materi klai ini kita akan bahas dengan mengguankan class validator.</p> <p>Dokumentasi resmi : <code>https://docs.nestjs.com/pipes</code></p>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/3.%20validation/#a-instalasi-class-validator-class-transformer","title":"a. Instalasi class-validator class-transformer","text":"<p>Pertama kita akan instalasi package yang dibutuhkan untuk menggunakan validasi.</p> <pre><code>npm install class-validator class-transformer\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/3.%20validation/#b-implementasikan-validation-pada-dto","title":"b. Implementasikan validation pada DTO","text":"<p>Setelah instalasi selesai kita akan tambahkan validaton di DTO</p> <pre><code>import { OmitType } from \"@nestjs/mapped-types\";\nimport { IsInt, IsNotEmpty, Min, Max, Length } from \"class-validator\";\nexport class BookDto {\n  id: number;\n\n  @IsNotEmpty() // title tidak boleh kosong\n  @Length(4, 10) // panjang karakter dari title minimal 4 dan maksimal 10\n  title: string;\n\n  @IsNotEmpty()\n  author: string;\n\n  @IsInt() // year wajib number\n  @Min(2020) // minimal tahun adalah 2020\n  @Max(2023) //maksimal tahun adalah 2023\n  year: number;\n}\n\nexport class CreateBookDto extends OmitType(BookDto, [\"id\"]) {}\nexport class UpdateBookDto extends OmitType(BookDto, [\"id\"]) {}\n</code></pre> <p>Pada kode di atas adalah contoh impelementasi <code>class-validator</code> padda DTO sehingga kita bisa memastakan data yang dikirim oleh client sesuai dengan kriteria yang sudah di tentuakan. Selain decorator di atas masih banyak lagi decorator yang bisa kita gunakan pada project. Kita dapat membaca dokumentasi resmi nya di</p> <p>https://github.com/typestack/class-validator#installation</p> <p>Namun class Validator tidak akan bekerja sebelum kita implementasikan <code>pipe</code>, pada contoh ini kita akan impelementasikan dulu validation pipe pada scope global. Hal yang harus kita lakukan adalah kita harus menambahkan <code>validationPipe</code> pada <code>main.ts</code>.</p>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/3.%20validation/#a-implementasikan-validation-pada-pipe-global","title":"a. Implementasikan validation pada pipe global","text":"<p>main.ts</p> <pre><code>import { NestFactory } from \"@nestjs/core\";\nimport { AppModule } from \"./app.module\";\nimport { ValidationPipe } from \"@nestjs/common\"; //import\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.useGlobalPipes(new ValidationPipe()); //implementasi\n  await app.listen(5002);\n}\nbootstrap();\n</code></pre> <p>Pengujian jika client mengirimkan year lebih dari 2023</p> <p></p> <p>Pengujian jika client mengirimkan panjang title kurang dari 4 karakter</p> <p></p> <p>Pengujian jika client mengirimkan sesuai dengan kriteria</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/3.%20validation/#2-pipe-scope","title":"2. Pipe Scope","text":"<p>Pada contoh di akan kita sudah mengimpelentasikan pipe global scope artinya validation akan diterapkan pada semua router hendler di controller. Ada beberapa cara dalam mengimpelentasikan pipe</p>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/3.%20validation/#a-global-scoped-pipes","title":"a. Global scoped pipes","text":"<p>Pipe global Scope bertujuan bahwa setiap validation akan diterapkan pada semua route handler. Jika kita menggunakan pendekatan ini maka implementasinya seperti kode di atas pada main.ts</p> <pre><code>import { NestFactory } from \"@nestjs/core\";\nimport { AppModule } from \"./app.module\";\nimport { ValidationPipe } from \"@nestjs/common\"; //import\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.useGlobalPipes(new ValidationPipe()); //implementasi\n  await app.listen(5002);\n}\nbootstrap();\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/3.%20validation/#b-validation-controller","title":"b. Validation Controller","text":"<p>Pada pendekatan ini , kita hanya mengimpelentasikan validasi pada route tertentu saja. Namun untuk menerapkan ini kita perlu menghapus kode app.useGlobalPipes(new ValidationPipe()); pada main.ts. Selanjutkan kita akan coba implementaskan validation Contoller pada book.controller.ts</p> <p>book.controller.ts</p> <pre><code>import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { BookService } from './book.service';\nimport { CreateBookDto, UpdateBookDto } from './book.dto';\n\n...\n\n  @Post('/create')\n  @UsePipes(ValidationPipe)\n  createBook(@Body() payload: CreateBookDto) {\n    return this.bookService.createBook(payload);\n  }\n\n  @Put('update/:id')\n  updateBook(@Param('id') id: string, @Body() updateBookDto: UpdateBookDto) {\n    return this.bookService.updateBook(Number(id), updateBookDto);\n  }\n\n}\n</code></pre> <p>Pengujian pada create yang menggunakan Validation</p> <p></p> <p>Pengujian pada update yang tidak menggunakan Validation</p> <p></p> <p>Pada dua pendekatan di atas, saya lebih merekomendasikan menggunakan global scope agar kita cukup sekali pada main.ts, namun tidak menutup kemungkinana ada case-case yang mengharuskan kita bukan menggunakan global scope.</p>"},{"location":"2.%20NestJS%20-%20Backend/5.%20Database/1.%20database_fund/","title":"A. Pengenalan Database","text":""},{"location":"2.%20NestJS%20-%20Backend/5.%20Database/1.%20database_fund/#1-apa-itu-database","title":"1. Apa itu Database?","text":"<p>Database adalah kumpulan data terstruktur yang disimpan secara sistematis dalam sebuah komputer atau sistem komputer. Data dalam database diorganisasi dan diatur dengan cara tertentu sehingga memungkinkan pengguna untuk menyimpan, mengelola, mengakses, dan mengambil informasi dengan efisien.</p> <p>Database merupakan bagian penting dari aplikasi perangkat lunak modern dan digunakan dalam berbagai bidang, termasuk bisnis, ilmu pengetahuan, pendidikan, pemerintahan, layanan kesehatan, dan banyak lagi. Dalam sebuah database, data dapat diorganisasi dalam tabel atau struktur data lainnya yang disebut \"entitas.\" Setiap entitas mewakili objek atau elemen dalam dunia nyata, dan setiap baris dalam tabel mewakili satu data yang berkaitan dengan entitas tersebut.</p> <p>Manfaat utama dari penggunaan database adalah:</p> <ol> <li> <p>Pengelolaan data yang efisien: Database memungkinkan penyimpanan data dalam format yang terstruktur, yang mempermudah pencarian, penambahan, pembaruan, dan penghapusan data dengan cepat dan efisien.</p> </li> <li> <p>Pengamanan data: Database dapat dilengkapi dengan fitur keamanan untuk melindungi data sensitif dan mencegah akses yang tidak sah.</p> </li> <li> <p>Konsistensi data: Dalam database, data yang serupa atau berkaitan dijaga agar selalu konsisten, menghindari terjadinya inkonsistensi data.</p> </li> <li> <p>Skalabilitas: Database dapat diatur untuk menangani jumlah data yang besar dan tumbuh seiring waktu tanpa mengorbankan kinerja.</p> </li> <li> <p>Dukungan untuk operasi kompleks: Database menyediakan bahasa kueri yang kuat, seperti SQL (Structured Query Language), yang memungkinkan pengguna untuk melakukan operasi kompleks seperti penggabungan, penyaringan, dan pengelompokan data.</p> </li> </ol> <p>Beberapa contoh sistem manajemen basis data (Database Management Systems - DBMS) populer termasuk MySQL, PostgreSQL, Microsoft SQL Server, Oracle, dan MongoDB. Setiap DBMS memiliki karakteristik dan kegunaan khusus, tergantung pada kebutuhan dan tujuan aplikasi yang digunakan.</p>"},{"location":"2.%20NestJS%20-%20Backend/5.%20Database/1.%20database_fund/#2-apa-itu-mysql","title":"2. Apa itu MySQL?","text":"<p>MySQL adalah salah satu sistem manajemen basis data relasional (Relational Database Management System - RDBMS) yang paling populer dan banyak digunakan di dunia. Ini adalah perangkat lunak sumber terbuka (open-source) yang dikembangkan dan didistribusikan oleh perusahaan Oracle Corporation.</p> <p>MySQL pertama kali dikembangkan oleh Michael Widenius dan David Axmark pada tahun 1994. Nama \"MySQL\" berasal dari nama putri Michael Widenius yang bernama \"My.\" Selanjutnya, \"SQL\" merupakan singkatan dari Structured Query Language, bahasa yang digunakan untuk mengelola dan mengakses data dalam basis data relasional.</p> <p>Beberapa fitur penting MySQL meliputi:</p> <ol> <li> <p>Struktur basis data relasional: MySQL memungkinkan Anda untuk membuat dan mengelola struktur tabel yang terhubung dengan kunci-kunci dan hubungan antara tabel. Ini mendukung pendekatan data relasional, yang memungkinkan Anda mengorganisasi data dalam banyak tabel terkait untuk menghindari duplikasi dan mencapai efisiensi dalam penyimpanan dan manipulasi data.</p> </li> <li> <p>Bahasa kueri SQL: MySQL menggunakan bahasa kueri SQL standar untuk mengakses dan memanipulasi data dalam basis data. SQL memungkinkan Anda untuk melakukan operasi seperti pengambilan data, penambahan data, pembaruan data, dan penghapusan data dengan mudah.</p> </li> <li> <p>Kecepatan dan kinerja: MySQL diketahui memiliki kinerja yang baik dan responsif dalam menangani permintaan database, terutama ketika diatur dan diindeks dengan baik. Ini membuatnya cocok untuk aplikasi dengan volume data tinggi atau tingkat permintaan yang tinggi.</p> </li> <li> <p>Multiplatform: MySQL mendukung berbagai sistem operasi, termasuk Windows, macOS, Linux, dan banyak lagi. Ini memungkinkan Anda untuk menggunakan MySQL di berbagai lingkungan yang berbeda.</p> </li> <li> <p>Skalabilitas: MySQL dapat dengan mudah diatur untuk mengelola banyak data dan mendukung aplikasi yang memerlukan skalabilitas baik secara horizontal maupun vertikal.</p> </li> </ol> <p>MySQL telah menjadi basis data pilihan bagi banyak aplikasi web, situs web, dan aplikasi perangkat lunak, termasuk aplikasi e-commerce, situs media sosial, sistem manajemen konten (CMS), dan banyak lagi, karena kombinasi keandalan, kinerja, dan kemudahan penggunaannya. Selain itu, MySQL sebagai perangkat lunak sumber terbuka telah menginspirasi berbagai cabang atau turunan lainnya, seperti MariaDB, yang juga merupakan RDBMS populer yang memiliki sejarah dan fitur yang mirip dengan MySQL.</p> <p>Untuk menginstall mysql pada komputer kita , kita dapat mengguankan xampp yang dapat di download pada link https://www.apachefriends.org/download.html.</p> <p>Setelah berhasil terdownload , Silahkan lanjutkan proses instalasi pada laptop kita.</p>"},{"location":"2.%20NestJS%20-%20Backend/5.%20Database/1.%20database_fund/#2-instalasi-mysql","title":"2. Instalasi MySQL?","text":""},{"location":"2.%20NestJS%20-%20Backend/5.%20Database/2.%20TypeORM_basic/","title":"B. TypeORM Basic CRUD","text":"<p>TypeORM merupakan ORM (Object Relational Mapping yang dapat berjalan pada NodeJS). Selain TypeOrm , ORM lain yang bisa digunakan pada nestjs adalah <code>sequelize</code>, <code>prisma</code> , <code>knex</code> dan lain-lain. untuk memulai menggukan TypeORM pada nestjs kita instalasi terlebih dahulu</p> <pre><code>npm install --save @nestjs/typeorm typeorm mysql2\n</code></pre> <p>Kemudian kita akan membuat file baru untuk menyimpan konfigurasi TypeOrm di aplikasi kita</p>"},{"location":"2.%20NestJS%20-%20Backend/5.%20Database/2.%20TypeORM_basic/#1-typeorm-config","title":"1. TypeOrm Config","text":"<p>Buatlah folder config pada folder src , kemudian buatlah file typeorm.config.ts</p> <p></p> <p>typeorm.config.ts</p> <pre><code>import { TypeOrmModuleOptions } from \"@nestjs/typeorm\";\nexport const typeOrmConfig: TypeOrmModuleOptions = {\ntype: \"mysql\",\nhost: \"localhost\",\nport: 3307, //port default 3306 lihat xampp\nusername: \"root\", // username default xampp root\npassword: \"root\", // password default xampp string kosong\ndatabase: \"belajar_nest_js\",\nentities: [\"dist/**/*.entity{.ts,.js}\"],\nsynchronize: true,\n};\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/5.%20Database/2.%20TypeORM_basic/#2-import-typeormconfig-pada-app-module","title":"2. Import TypeOrmConfig pada app module","text":"<p>import module TypeOrm pada app.module.ts agar typeorm bisa digunakan pada aplikasi kita.</p> <p>app.module.ts</p> <pre><code>import { Module } from \"@nestjs/common\";\nimport { AppController } from \"./app.controller\";\nimport { AppService } from \"./app.service\";\nimport { LatihanModule } from \"./latihan/latihan.module\";\nimport { BookModule } from \"./book/book.module\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { typeOrmConfig } from \"./config/typeorm.config\";\n@Module({\nimports: [TypeOrmModule.forRoot(typeOrmConfig), LatihanModule, BookModule], \ncontrollers: [AppController],\nproviders: [AppService],\n})\nexport class AppModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/5.%20Database/2.%20TypeORM_basic/#3-membuat-book-entity","title":"3. Membuat Book Entity","text":"<p>Kemudian kita akan membuat entity untuk membuat table pada database mysql. </p> <p>Buatlah file dengan nama <code>book.entity.ts</code> pada folder book, seperti berikut</p> <p></p> <p>book.entity.ts</p> <pre><code>import { Entity, BaseEntity, PrimaryGeneratedColumn, Column } from \"typeorm\";\n@Entity()\nexport class Book extends BaseEntity {\n@PrimaryGeneratedColumn()\nid: number;\n@Column()\ntitle: string;\n@Column()\nauthor: string;\n@Column()\nyear: number;\n@Column({ type: \"datetime\", default: () =&gt; \"CURRENT_TIMESTAMP\" })\ncreated_at: Date;\n@Column({ type: \"datetime\", default: () =&gt; \"CURRENT_TIMESTAMP\" })\nupdated_at: Date;\n}\n</code></pre> <p>Kemudian kita import entity pada book.module.ts</p> <p>book.module.ts</p> <pre><code>import { Module } from \"@nestjs/common\";\nimport { BookService } from \"./book.service\";\nimport { BookController } from \"./book.controller\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { Book } from \"./book.entity\"; //import dari book.entity.ts\n@Module({\nimports: [TypeOrmModule.forFeature([Book])], // import dengan TypeOrm For Feature\nproviders: [BookService],\ncontrollers: [BookController],\n})\nexport class BookModule {}\n</code></pre> <p>Kemudian kita lihat apakah tabel sudah terbuat atau tidak pada database</p> <p></p> <p>Pada gambar tersebut terlihat kalau tabel sudah terbuat secara otomatis pada database, jika kita mengalami kendala tabel tidak terbuat, silahkan cek kembali langkah-langkah di atas.</p>"},{"location":"2.%20NestJS%20-%20Backend/5.%20Database/2.%20TypeORM_basic/#4-menggunakan-book-entity-pada-bookservice","title":"4. Menggunakan Book Entity pada BookService","text":"<p>Ketika kita sudah menggukana forFeature() pada module, selanjutnya kita akan menginject BookRepository ke dalam BookService dengan menggunakan @InjectRepository() decorator</p> <pre><code>import { Injectable, NotFoundException } from '@nestjs/common';\nimport { ResponseSuccess } from 'src/interface/response';\nimport { CreateBookDto, UpdateBookDto } from './book.dto';\nimport { InjectRepository } from '@nestjs/typeorm'; // import injectReposity\nimport { Book } from './book.entity'; // import Book Entiy\nimport { Repository } from 'typeorm'; import //import repository\n@Injectable()\nexport class BookService {\n//inject book repository ke service\nconstructor(\n@InjectRepository(Book) private readonly bookRepository: Repository&lt;Book&gt;,\n) {}\n//inject book repository ke service\nprivate books: {\nid?: number;\ntitle: string;\nauthor: string;\nyear: number;\n}[] = [\n{\nid: 1,\ntitle: 'HTML CSS',\nauthor: 'ihsanabuhanifah',\nyear: 2023,\n},\n];\ngetAllBooks(): ResponseSuccess {\nreturn {\nstatus: 'Success',\nmessage: 'List Buku ditermukan',\ndata: this.books,\n};\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/5.%20Database/2.%20TypeORM_basic/#5-menambahkan-book-ke-tabel-dengan-typeorm","title":"5. Menambahkan Book ke Tabel dengan TypeOrm","text":"<p>Pada materi ini , kita akan berlatih menambahkan data ke tabel book pada database mengguankan method <code>save()</code> dari TypeOrm</p> <p>Perhatikan method createBook pada bookService, sebelumnya kita menggunakan database semetera pada array book seperti koding di bawah</p> <pre><code>createBook(createBookDto: CreateBookDto): ResponseSuccess {\nconst { title, author, year } = createBookDto;\nthis.books.push({\nid: new Date().getTime(),\ntitle: title,\nauthor: author,\nyear: year,\n});\nreturn {\nstatus: 'Success',\nmessage: 'Berhasil menambakan buku',\n};\n}\n</code></pre> <p>selanjutnya kita kan ubah tempat menyimpan data ke dalam database dan menampilkannya , maka seperti koding di bawah ini</p> <pre><code>import {\nHttpException,\nHttpStatus,\nInjectable,\nNotFoundException,\n} from '@nestjs/common';\n...\nasync createBook(createBookDto: CreateBookDto): Promise&lt;ResponseSuccess&gt; {\nconst { title, author, year } = createBookDto;\ntry {\nawait this.bookRepository.save({\ntitle: title,\nauthor: author,\nyear: year,\n});\nreturn {\nstatus: 'Success',\nmessage: 'Berhasil menambakan buku',\n};\n} catch (err) {\nthrow new HttpException('Ada Kesalahan', HttpStatus.BAD_REQUEST);\n}\n}\n...\n</code></pre> <p>Pada kode diatas, kita ubah method <code>createBook</code> menjadi <code>asynchronous</code> karena saat proses penyimpanan data akan ada jeda waktu menunggu sampai ada response, ntuk menjadikan <code>asyncronous</code> kita cukup memberika keyword async.</p> <p>Selanjutnya kita bikin kondisi jika penyimpanan gagal maka akan menampilkan pesan kesalahan \"Ada Kesalahan\" dengan kode 400.</p>"},{"location":"2.%20NestJS%20-%20Backend/5.%20Database/2.%20TypeORM_basic/#-pengujian-pada-create","title":"-  Pengujian pada create","text":"<p>Kita cek apakah data berhasil masuk atau belum ke database</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/5.%20Database/2.%20TypeORM_basic/#6-menampilkan-data-book-dengan-typeorm","title":"6. Menampilkan data Book dengan TypeOrm","text":"<p>Pada materi ini kita akan menampilkan data dengan method find() pada typeOrm.</p> <pre><code>async getAllBooks(): Promise&lt;ResponseSuccess&gt; {\nconst result = await this.bookRepository.find();\nreturn {\nstatus: 'Success',\nmessage: 'List Buku ditermukan',\ndata: result,\n};\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/5.%20Database/2.%20TypeORM_basic/#-pengujian-pada-postman","title":"- Pengujian pada Postman","text":""},{"location":"2.%20NestJS%20-%20Backend/5.%20Database/2.%20TypeORM_basic/#7-menampilkan-detail-book-dengan-typeorm","title":"7. Menampilkan detail book dengan TypeOrm","text":"<pre><code>...\nasync getDetail(id: number): Promise&lt;ResponseSuccess&gt; {\nconst detailBook = await this.bookRepository.findOne({\nwhere: {\nid,\n},\n});\nif (detailBook === null) {\nthrow new NotFoundException(`Buku dengan id ${id} tidak ditemukan`);\n}\nreturn {\nstatus: 'Success',\nmessage: 'Detail Buku ditermukan',\ndata: detailBook,\n};\n}\n...\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/5.%20Database/2.%20TypeORM_basic/#-pengujian-pada-postman_1","title":"- Pengujian pada Postman","text":""},{"location":"2.%20NestJS%20-%20Backend/5.%20Database/2.%20TypeORM_basic/#8-mengupdate-book-dengan-typeorm","title":"8. Mengupdate book dengan TypeOrm","text":"<pre><code>async updateBook(\nid: number,\nupdateBookDto: UpdateBookDto,\n): Promise&lt;ResponseSuccess&gt; {\nconst check = await this.bookRepository.findOne({\nwhere: {\nid,\n},\n});\nif (!check)\nthrow new NotFoundException(`Buku dengan id ${id} tidak ditemukan`);\nconst update = await this.bookRepository.save({ ...updateBookDto, id: id });\nreturn {\nstatus: `Success `,\nmessage: 'Buku berhasil di update',\ndata: update,\n};\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/5.%20Database/2.%20TypeORM_basic/#-pengujian-pada-update","title":"- Pengujian pada Update","text":""},{"location":"2.%20NestJS%20-%20Backend/5.%20Database/2.%20TypeORM_basic/#-pengujian-pada-after-update","title":"- Pengujian pada after update","text":"<p>Setelah proses update berhasil, kita akan cek kembali menggunakan endpoint detail.</p> <p></p> <p>Pada gambar di atas, kita sudah berhasil merubah data sesuai yang di update</p>"},{"location":"2.%20NestJS%20-%20Backend/5.%20Database/2.%20TypeORM_basic/#9-menghapus-book-dengan-typeorm","title":"9. Menghapus book dengan TypeOrm","text":"<pre><code>async deleteBook(id: number): Promise&lt;ResponseSuccess&gt; {\nconst check = await this.bookRepository.findOne({\nwhere: {\nid,\n},\n});\nif (!check)\nthrow new NotFoundException(`Buku dengan id ${id} tidak ditemukan`);\nawait this.bookRepository.delete(id);\nreturn {\nstatus: `Success `,\nmessage: 'Berhasil menghapus buku',\n};\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/5.%20Database/2.%20TypeORM_basic/#-pengujian-pada-delete","title":"- Pengujian pada Delete","text":""},{"location":"2.%20NestJS%20-%20Backend/5.%20Database/2.%20TypeORM_basic/#10-memambahkan-banyak-buku-ke-table-dengan-typeorm","title":"10. Memambahkan Banyak Buku ke table dengan TypeOrm","text":"<p>book.service.ts</p> <pre><code>...\nasync bulkCreate(payload: CreateBookDto[]): Promise&lt;ResponseSuccess&gt; {\ntry {\nlet berhasil = 0;\nlet gagal = 0;\nawait Promise.all(\npayload.map(async (data) =&gt; {\ntry {\nawait this.bookRepository.save(data);\nberhasil += 1;\n} catch {\ngagal += 1;\n}\n}),\n);\nreturn {\nstatus: `Success `,\nmessage: `Berhasil menyimpan ${berhasil} dan gagal ${gagal}`,\n};\n} catch {\nthrow new HttpException('Ada Kesalahan', HttpStatus.BAD_REQUEST);\n}\n}\n...\n</code></pre> <p>book.controller.ts</p> <pre><code>@Post('/create/bulk')\nbulkCreateBook(@Body() payload: CreateBookDto[]) {\nreturn this.bookService.bulkCreate(payload);\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/5.%20Database/2.%20TypeORM_basic/#-pengujian-pada-postman_2","title":"- Pengujian pada Postman","text":""},{"location":"2.%20NestJS%20-%20Backend/5.%20Database/2.%20TypeORM_basic/#11-membuat-paginationpaging-pada-menampilan-semua-data","title":"11. Membuat Pagination(Paging) pada menampilan semua data","text":"<p>Ketika membuat REST API untuk menampilkan semua data di tabel, maka kita perlu menggunakan paging agar query di backend tidak terlalu berat dan kita bisa membatasi berapa data yang ditampilkan dalam satu kali query.</p> <p>Pada materi ini kita akan membahas bagaiaman membuat paging dengan typeorm dan nestjs</p> <p>Langkah Pertama kita buat dulu response type untuk pagination</p> <p>src/interface/response/response.interface.ts</p> <pre><code>import { HttpStatus } from \"@nestjs/common\";\nexport interface ResponseSuccess {\nstatusCode?: HttpStatus;\nstatus: string;\nmessage: string;\ndata?: any;\n}\nexport interface ResponsePagination extends ResponseSuccess {\npagination: {\ntotal: number;\npage: number;\npageSize: number;\n};\n}\n</code></pre> <p>Jadi ketika pagination kita wajibkan return memiliki object pagination denga property total data, page saat ini dan berapa data yang ditampilkan (pageSize)</p> <p>Langkah Kedua kita buat dto untuk pagination , dengan membuat folder baru utils/dto</p> <p></p> <p>src/utils/dto/page.dto.ts</p> <pre><code>import { Type } from \"class-transformer\";\nimport { IsInt } from \"class-validator\";\nexport class PageRequestDto {\n@IsInt()\n@Type(() =&gt; Number)\npage = 1;\n@IsInt()\n@Type(() =&gt; Number)\npageSize = 10;\n}\n</code></pre> <p>Langkah Ketiga kita buat dto findBookDto di book.dto.ts dengan mengextends PageRequestDto</p> <pre><code>import { OmitType } from \"@nestjs/mapped-types\";\nimport { IsInt, IsNotEmpty, Min, Max, Length } from \"class-validator\";\nimport { PageRequestDto } from \"src/utils/dto/page.dto\";\nexport class BookDto {\nid: number;\n@IsNotEmpty()\n@Length(4, 10)\ntitle: string;\n@IsNotEmpty()\nauthor: string;\n@IsInt()\n@Min(2020)\n@Max(2023)\nyear: number;\n}\nexport class CreateBookDto extends OmitType(BookDto, [\"id\"]) {}\nexport class UpdateBookDto extends OmitType(BookDto, [\"id\"]) {}\nexport class FindBookDto extends PageRequestDto {\ntitle: string;\nauthor: string;\n}\n</code></pre> <p>Langkah Ke Empat kita ubah koding findAllBook pada controller dan service</p> <p>book.service.ts</p> <pre><code>import {\nHttpException,\nHttpStatus,\nInjectable,\nNotFoundException,\n} from '@nestjs/common';\nimport { ResponsePagination, ResponseSuccess } from 'src/interface/response';\nimport { CreateBookDto, FindBookDto, UpdateBookDto } from './book.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Book } from './book.entity';\nimport { Repository } from 'typeorm';\n@Injectable()\nexport class BookService {\nconstructor(\n@InjectRepository(Book) private readonly bookRepository: Repository&lt;Book&gt;,\n) {}\nprivate books: {\nid?: number;\ntitle: string;\nauthor: string;\nyear: number;\n}[] = [\n{\nid: 1,\ntitle: 'HTML CSS',\nauthor: 'ihsanabuhanifah',\nyear: 2023,\n},\n];\nasync getAllBooks(query: FindBookDto): Promise&lt;ResponsePagination&gt; {\nconsole.log('uqwey', query);\nconst { page, pageSize } = query;\nconst total = await this.bookRepository.count();\nconst result = await this.bookRepository.find({\nskip: (Number(page) - 1) * Number(pageSize),\ntake: Number(pageSize),\n});\nreturn {\nstatus: 'Success',\nmessage: 'List Buku ditermukan',\ndata: result,\npagination: {\ntotal: total,\npage: Number(page),\npageSize: Number(pageSize),\n},\n};\n}\n...\n}\n</code></pre> <p>book.controller.ts</p> <pre><code>import {\nBody,\nController,\nDelete,\nGet,\nParam,\nPost,\nPut,\nQuery,\nUsePipes,\nValidationPipe,\n} from \"@nestjs/common\";\nimport { BookService } from \"./book.service\";\nimport { CreateBookDto, FindBookDto, UpdateBookDto } from \"./book.dto\";\n@Controller(\"book\")\nexport class BookController {\nconstructor(private bookService: BookService) {}\n@Get(\"/list\")\nfindAllBook(@Query() findBookDto: FindBookDto) {\nreturn this.bookService.getAllBooks(findBookDto);\n}\n}\n</code></pre> <p>Pengujian pada Postman</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/5.%20Database/2.%20TypeORM_basic/#12-implementasi-custom-decorator-untuk-meyederhanakan-paging","title":"12. Implementasi Custom Decorator untuk meyederhanakan Paging","text":"<p>Selain mengguankan decorator bawaan seperti <code>@Body()</code>, <code>@Query()</code>, <code>@Param()</code> pada controler, kita juga bisa membuat Custom Decorator seperti pada dokumentasi https://docs.nestjs.com/custom-decorators. Pada contoh kasus kali ini, kita akan membuat Custom Decorator untuk paging sehingga, pada setiap service kita tidak perlu menghitung ulang page dan limit untuk paging</p> <pre><code>async getAllBooks(query: FindBookDto): Promise&lt;ResponsePagination&gt; {\n...\nconst result = await this.bookRepository.find({\nskip: (Number(page) - 1) * Number(pageSize),\ntake: Number(pageSize),\n});\n...\n}\n</code></pre> <p>Perhatikan pada bagian skip, disitu kita harus menghitung limit , bayangkan jika kita membuat fitur ini pada module lain, maka kita harus selalu menghitung limit. Tentu hal ini tidak efektif karena harus melalukan pekerjaan yang sama secara berulang. Pada materi ini kita akan membuat custom decorator agar kita tidak perlu menghitung ulang limit, namun nanti kita hanya tinggal menggunakan saja pada setiap service.</p> <p>Langkah pertama, buatlah folder decorator pada folder utils</p> <p>src/utils/decorator/pagination.decorator.ts</p> <pre><code>import { createParamDecorator, ExecutionContext } from '@nestjs/common';\nexport const Pagination = createParamDecorator(\n(data: unknown, ctx: ExecutionContext) =&gt; {\nconst request = ctx.switchToHttp().getRequest();\nif (!!request.query.page === false) {   //memberikan nilai default 1 jika tidak dikirim client\nrequest.query.page = 1;\n}\nif (!!request.query.pageSize === false) { //memberikan nilai default 10 jika tidak dikirim client\nrequest.query.pageSize = 10;\n}\nrequest.limit =\n(Number(request.query.page) - 1) * Number(request.query.pageSize);\nrequest.pageSize = Number(request.query.pageSize);\nrequest.page = Number(request.page);\nreturn request.query;\n},\n);\n</code></pre> <p>Pada kode di atas , kita menghitung limit dan kita return hasilnya pada decorator pagination</p> <p>Langkah kedua, update main.ts</p> <p>Karena kita menggunakan custom decorator maka kita harus mengaktifkan validateCustomDecorators menjadi true seperti pada kode di bawah.</p> <p>main.ts</p> <pre><code>import { NestFactory } from \"@nestjs/core\";\nimport { AppModule } from \"./app.module\";\nimport { ValidationPipe } from \"@nestjs/common\";\nasync function bootstrap() {\nconst app = await NestFactory.create(AppModule);\napp.useGlobalPipes(\nnew ValidationPipe({\nwhitelist: true,\nforbidUnknownValues: true,\ntransform: true,\nvalidateCustomDecorators: true,\ntransformOptions: {\nenableImplicitConversion: true,\n},\n})\n);\nawait app.listen(5002);\n}\nbootstrap();\n</code></pre> <p>Langkah Ketiga</p> <p>Selanjutnya kita ganti decorator @Query() pada findAllBook di book.controller.ts dengan custom decorator Pagination() yang kita buat.</p> <p>book.controller.ts</p> <pre><code>import {\nBody,\nController,\nDelete,\nGet,\nParam,\nPost,\nPut,\nQuery,\nUsePipes,\nValidationPipe,\n} from '@nestjs/common';\nimport { BookService } from './book.service';\nimport { CreateBookDto, FindBookDto, UpdateBookDto } from './book.dto';\nimport { Pagination } from 'src/utils/decorator/pagination.decorator';\n@Controller('book')\nexport class BookController {\nconstructor(private bookService: BookService) {}\n@Get('/list')\nfindAllBook(@Pagination() findBookDto: FindBookDto) {\nreturn this.bookService.getAllBooks(findBookDto);\n}\n...\n}\n</code></pre> <p>Langkah keempat Selanjutnya kita terapkan limit dan pageSize pada book.service.ts</p> <p>book.service.ts</p> <pre><code>async getAllBooks(query: FindBookDto): Promise&lt;ResponsePagination&gt; {\nconst { page, pageSize, limit } = query;\nconst total = await this.bookRepository.count();\nconst result = await this.bookRepository.find({\nskip: limit,\ntake: pageSize,\n});\nreturn {\nstatus: 'Success',\nmessage: 'List Buku ditermukan',\ndata: result,\npagination: {\ntotal: total,\npage: page,\npageSize: pageSize,\n},\n};\n}\n</code></pre> <p>saat kita nemmbahkan limit pada query maka akan muncul error, untuk mengatasi hal tersebut kita perbaharui page.dto.ts</p> <p>page.dto.ts</p> <pre><code>import { Type } from \"class-transformer\";\nimport { IsInt, IsOptional } from \"class-validator\";\nexport class PageRequestDto {\n@IsInt()\n@Type(() =&gt; Number)\npage = 1;\n@IsInt()\n@Type(() =&gt; Number)\npageSize = 10;\n@IsInt()\n@IsOptional()\nlimit;\n}\n</code></pre> <p>Pengujian pada Postman</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/5.%20Database/2.%20TypeORM_basic/#13-membuat-filter-page-getallbook","title":"13. Membuat Filter page getAllBook","text":"<p>Seringkali ketika menampilkan data , kita membutuhkan filter fitur yang bisa dikombinasikan atau salah satu saja. Contoh pada kasus book kita kita bisa memcari berdasarkan salah satu dari author, title, year atau kombinasi ketiga nya.</p> <p>Pada materi kali ini kita akan membuar fitur filter berdasrkan title, author, dan range tahun terbit seperti terlihat pada postman</p> <p></p> <p>Langkah Pertama</p> <p>Kita tambahkan option titile, author, from_year, to_year pada book.dto.ts</p> <p>book.dto.ts</p> <pre><code>import { OmitType } from \"@nestjs/mapped-types\";\nimport { Type } from \"class-transformer\";\nimport {\nIsInt,\nIsNotEmpty,\nMin,\nMax,\nLength,\nIsOptional,\n} from \"class-validator\";\nimport { PageRequestDto } from \"src/utils/dto/page.dto\";\nexport class BookDto {\nid: number;\n@IsNotEmpty()\n@Length(4, 10)\ntitle: string;\n@IsNotEmpty()\nauthor: string;\n@IsInt()\n@Min(2020)\n@Max(2023)\nyear: number;\n}\nexport class CreateBookDto extends OmitType(BookDto, [\"id\"]) {}\nexport class UpdateBookDto extends OmitType(BookDto, [\"id\"]) {}\nexport class FindBookDto extends PageRequestDto {\n@IsOptional()\ntitle: string;\n@IsOptional()\nauthor: string;\n@IsOptional()\n@IsInt()\n@Type(() =&gt; Number)\nfrom_year: number;\n@IsOptional()\n@IsInt()\n@Type(() =&gt; Number)\nto_year: number;\n}\n</code></pre> <p>Langkah kedua</p> <p>Selanjutkan kita tambahkan condition statement pada method find tyoeorm</p> <pre><code>async getAllBooks(query: FindBookDto): Promise&lt;ResponsePagination&gt; {\nconst { page, pageSize, limit, title, author, from_year, to_year } = query;\nconsole.log('q', query);\nconst total = await this.bookRepository.count();\nconst filter: {\n[key: string]: any;\n} = {};\nif (title) {\nfilter.title = Like(`%${title}%`);\n}\nif (author) {\nfilter.author = Like(`%${author}%`);\n}\nif (from_year &amp;&amp; to_year) {\nfilter.year = Between(from_year, to_year);\n}\nif (from_year &amp;&amp; !!to_year === false) {\nfilter.year = Between(from_year, from_year);\n}\nconst result = await this.bookRepository.find({\nwhere: filter,\nskip: limit,\ntake: pageSize,\n});\nreturn {\nstatus: 'Success',\nmessage: 'List Buku ditermukan',\ndata: result,\npagination: {\ntotal: total,\npage: page,\npageSize: pageSize,\n},\n};\n}\n</code></pre> <p>Pengujian Postman</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/5.%20Database/2.%20TypeORM_basic/#14-membuat-base-response","title":"14. Membuat Base Response","text":"<p>untuk membuat penulisan response menjadi sederhana saat return dalam service, kita akan membuat class Base Response pada folder utils.</p> <p></p> <p>utils/response/base.response.ts</p> <pre><code>import { ResponseSuccess, ResponsePagination } from \"src/interface/response\";\nclass BaseResponse {\n_success(message: string, data?: any): ResponseSuccess {\nreturn {\nstatus: \"Success\",\nmessage: message,\ndata: data || {},\n};\n}\n_pagination(\nmessage: string,\ndata: any,\ntotalData: number,\npage: number,\npageSize: number\n): ResponsePagination {\nreturn {\nstatus: \"Success\",\nmessage: message,\ndata: data,\npagination: {\ntotal: totalData,\npage: page,\npageSize: pageSize,\n},\n};\n}\n}\nexport default BaseResponse;\n</code></pre> <p>Kemudian class tersebut kita extend pada book.service.ts</p> <p>book.service.ts</p> <pre><code>import {\nHttpException,\nHttpStatus,\nInjectable,\nNotFoundException,\n} from '@nestjs/common';\nimport { ResponsePagination, ResponseSuccess } from 'src/interface/response';\nimport { CreateBookDto, FindBookDto, UpdateBookDto } from './book.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Book } from './book.entity';\nimport { Between, Like, Repository } from 'typeorm';\nimport BaseResponse from 'src/utils/response/base.response'; //import class Base Response\n@Injectable()\nexport class BookService extends BaseResponse { //extend class BaseResponse\nconstructor(\n@InjectRepository(Book) private readonly bookRepository: Repository&lt;Book&gt;,\n) {\nsuper(); // karena BookService menjadi sub class dari BaseResponse maka harus diberkan super()\n}\n...\n}\n</code></pre> <p>Setelah kita extend BaseResponse selanjutkan kita impelentasikan pada return setiap method service di book.service.ts</p> <p>book.service.ts</p> <pre><code>async getAllBooks(query: FindBookDto): Promise&lt;ResponsePagination&gt; {\nconst { page, pageSize, limit, title, author, from_year, to_year } = query;\nconsole.log('q', query);\nconst total = await this.bookRepository.count();\nconst filter: {\n[key: string]: any;\n} = {};\nif (title) {\nfilter.title = Like(`%${title}%`);\n}\nif (author) {\nfilter.author = Like(`%${author}%`);\n}\nif (from_year &amp;&amp; to_year) {\nfilter.year = Between(from_year, to_year);\n}\nif (from_year &amp;&amp; !!to_year === false) {\nfilter.year = Between(from_year, from_year);\n}\nconst result = await this.bookRepository.find({\nwhere: filter,\nskip: limit,\ntake: pageSize,\n});\nreturn this._pagination('OK', result, total, page, pageSize); // implementasi method _pagination disini\n}\nasync createBook(createBookDto: CreateBookDto): Promise&lt;ResponseSuccess&gt; {\nconst { title, author, year } = createBookDto;\ntry {\nawait this.bookRepository.save({\ntitle: title,\nauthor: author,\nyear: year,\n});\nreturn this._success('OK'); // implementasi method _success disini\n} catch (err) {\nthrow new HttpException('Ada Kesalahan', HttpStatus.BAD_REQUEST);\n}\n}\n</code></pre> <p><code>Pengujian pada Postman create</code></p> <p></p> <p><code>Pengujian pada Postman get all dengan filter</code></p> <p></p> <p>Selanjutkan silahkan implementasikan pada method-method lain pada book.service.ts</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/1.%20register_login/","title":"A. Login dan Register","text":"<p>Pada bahasan kali kita kita akan membuat feature untuk authentikasi pada project kita. Kita akan belajar langkah demi langkah untuk membuat authentikasi.</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/1.%20register_login/#1-membuat-module-auth","title":"1. Membuat module auth","text":"<p><pre><code>npx nest c module  app/auth\nnpx nest g controller  app/auth\nnpx nest g service   app/auth\n</code></pre> </p> <p>Pada project ini, semua module feature kita masukan ke dalam folder app seperi pada gambar di atas</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/1.%20register_login/#2-membuat-entity","title":"2. Membuat Entity","text":"<p>Pada project kita table user seperti pada gambar di atas. Selanjutnya kita akan membuat entity pada module auth</p> <p>auth.entity.ts</p> <pre><code>import { Entity, BaseEntity, PrimaryGeneratedColumn, Column } from \"typeorm\";\n@Entity()\nexport class User extends BaseEntity {\n@PrimaryGeneratedColumn()\nid: number;\n@Column({ nullable: true })\navatar: string;\n@Column({ nullable: false })\nnama: string;\n@Column({ unique: true, nullable: false })\nemail: string;\n@Column({ nullable: true })\npassword: string;\n@Column({ nullable: true })\nrefresh_token: string;\n@Column({ nullable: true })\nrole: string;\n@Column({ type: \"datetime\", default: () =&gt; \"CURRENT_TIMESTAMP\" })\ncreated_at: Date;\n@Column({ type: \"datetime\", default: () =&gt; \"CURRENT_TIMESTAMP\" })\nupdated_at: Date;\n}\n</code></pre> <p>Implementasikan pada module</p> <p>auth.module.ts</p> <pre><code>import { Module } from \"@nestjs/common\";\nimport { AuthController } from \"./auth.controller\";\nimport { AuthService } from \"./auth.service\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { User } from \"./auth.entity\";\n@Module({\nimports: [TypeOrmModule.forFeature([User])],\ncontrollers: [AuthController],\nproviders: [AuthService],\n})\nexport class AuthModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/1.%20register_login/#3-membuat-fitur-register","title":"3. Membuat fitur Register","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/1.%20register_login/#a-membuat-dto-untuk-register","title":"a. Membuat DTO untuk register","text":"<pre><code>import { PartialType, PickType } from \"@nestjs/mapped-types\";\nimport { IsEmail, IsInt, IsString, Length, MinLength } from \"class-validator\";\nexport class UserDto {\n@IsInt()\nid: number;\n@IsString()\nnama: string;\n@IsString()\navatar: string;\n@IsString()\n@IsEmail()\nemail: string;\n@IsString()\n@MinLength(8)\npassword: string;\n@IsString()\nrefresh_token: string;\n@IsString()\nrole: string;\n}\nexport class RegisterDto extends PickType(UserDto, [\n\"nama\",\n\"email\",\n\"password\",\n]) {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/1.%20register_login/#b-instalasi-package-crypto-untuk-hash-password","title":"b. Instalasi package crypto untuk hash password","text":"<pre><code>npm install bcrypt --save\nnpm install -D @types/bcrypt\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/1.%20register_login/#c-membuat-service-untuk-register","title":"c. Membuat Service untuk register","text":"<pre><code>import { HttpException, HttpStatus, Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport BaseResponse from \"src/utils/response/base.response\";\nimport { User } from \"./auth.entity\";\nimport { Repository } from \"typeorm\";\nimport { ResponseSuccess } from \"src/interface/response\";\nimport { RegisterDto } from \"./auth.dto\";\nimport { hash } from \"bcrypt\"; //import hash\n@Injectable()\nexport class AuthService extends BaseResponse {\nconstructor(\n@InjectRepository(User) private readonly authRepository: Repository&lt;User&gt;\n) {\nsuper();\n}\nasync register(payload: RegisterDto): Promise&lt;ResponseSuccess&gt; {\nconst checkUserExists = await this.authRepository.findOne({\nwhere: {\nemail: payload.email,\n},\n});\nif (checkUserExists) {\nthrow new HttpException(\"User already registered\", HttpStatus.FOUND);\n}\npayload.password = await hash(payload.password, 12); //hash password\nawait this.authRepository.save(payload);\nreturn this._success(\"Register Berhasil\");\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/1.%20register_login/#d-membuat-controller-untuk-end-point-register","title":"d. Membuat Controller untuk end point register","text":"<pre><code>import { Controller, Post, Body } from \"@nestjs/common\";\nimport { RegisterDto } from \"./auth.dto\";\nimport { AuthService } from \"./auth.service\";\n@Controller(\"auth\")\nexport class AuthController {\nconstructor(private authService: AuthService) {}\n@Post(\"register\")\nasync register(@Body() payload: RegisterDto) {\nreturn this.authService.register(payload);\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/1.%20register_login/#f-pengujian-di-postman","title":"f. Pengujian di Postman","text":"<p>Cek Pada table users di database</p> <p></p> <p>Terlihat pada gambar di atas, kita sudah berhasil register user baru dan passowrd berhasil di hash.</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/1.%20register_login/#4-membuat-fitur-login","title":"4. Membuat Fitur Login","text":"<p>Sebelumnya kita sudah berhasil membuat fitur register , selanjutnya kita akan membuat fitur login.</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/1.%20register_login/#a-membuat-login-dto","title":"a. Membuat Login DTO","text":"<p>auth.dto.ts</p> <pre><code>import { PartialType, PickType } from '@nestjs/mapped-types';\nimport { IsEmail, IsInt, IsString, Length, MinLength } from 'class-validator';\n...\nexport class LoginDto extends PickType(UserDto, ['email', 'password']) {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/1.%20register_login/#b-membuat-service-untuk-login","title":"b. Membuat Service untuk login","text":"<p>auth.service.ts</p> <pre><code> async login(payload: LoginDto): Promise&lt;ResponseSuccess&gt; {\nconst checkUserExists = await this.authRepository.findOne({\nwhere: {\nemail: payload.email,\n},\nselect: {\nid: true,\nnama: true,\nemail: true,\npassword: true,\nrefresh_token: true,\n},\n});\nif (!checkUserExists) {\nthrow new HttpException(\n'User tidak ditemukan',\nHttpStatus.UNPROCESSABLE_ENTITY,\n);\n}\nconst checkPassword = await compare(\npayload.password,\ncheckUserExists.password,\n); // compare password yang dikirim dengan password yang ada di tabel\nif (checkPassword) {\nreturn this._success('Login Success', checkUserExists);\n} else {\nthrow new HttpException(\n'email dan password tidak sama',\nHttpStatus.UNPROCESSABLE_ENTITY,\n);\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/1.%20register_login/#c-membuat-end-point-login-pada-controller","title":"c. Membuat end point login pada controller","text":"<pre><code>@Post('login')\nasync login(@Body() payload: LoginDto) {\nreturn this.authService.login(payload);\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/1.%20register_login/#d-pengujian-pada-postman","title":"d. Pengujian pada Postman","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/2.%20jwt_token/","title":"B. JSON Web Token (JWT) dan Guard","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/2.%20jwt_token/#1-konsep-json-web-token-jwt","title":"1. Konsep Json Web Token (JWT)","text":"<p>Pada materi ini kita akan menggunakan JWT (JSON web Token) untuk token dalam proses authentikasi. Dokumentasi jwt : https://jwt.io/</p> <p>kita akan bahas terlebih dahulu </p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/2.%20jwt_token/#a-apa-itu-jwt","title":"a. Apa itu jwt?","text":"<ul> <li>JWT merupakan standar untuk melakukan pertukaran data dan authentikasi</li> <li>JWT mengikuti standar RFC 7591</li> <li>Data yang dipertukarkan mengguankan format JSON</li> <li>JWT dapt di enkripsi menggunakan secret key seperti HMAC atau public/private key seperti RSA</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/2.%20jwt_token/#bkapan-jwt-digunakan","title":"b.Kapan JWT digunakan ?","text":"<ul> <li>Authorization (login)</li> <li>Information Exchange</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/2.%20jwt_token/#c-struktur-jwt","title":"c. Struktur JWT","text":"<p>Seperti pada struktur jwt di atas, jwt membutuhkan signature yang hanya diketahui oleh server untuk mengecek apakan token valid atau tidak.</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/2.%20jwt_token/#d-apa-itu-header-jwt","title":"d. Apa itu Header JWT?","text":"<ul> <li>Berisikan informasi algoritma enkripsi yang digunakan</li> <li>Merupakan hasil base64. dari informati header dalam bentuk JSON</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/2.%20jwt_token/#e-apa-itu-payload-jwt","title":"e. Apa itu payload JWT?","text":"<ul> <li>Berisi informasi yang digunakan untuk menverifikasi informasi yang dikirm dari client ke server</li> <li>Payload tidak boleh berisi data sensitif , contoh nya password</li> <li>Hasil dari base64 dalam bentuk JSON</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/2.%20jwt_token/#f-signature","title":"f. Signature","text":"<ul> <li>Berisikan informasi yang dapat digunakan untuk memvalidasi JWT</li> <li>Didapatkan dengan mengenkripsi <code>header</code> dan <code>payload</code> menggunakan alogaritma yang sudah ditentukan oleh header</li> <li>Menggunakan <code>secret key</code> atau <code>private key</code> dari penerima</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/2.%20jwt_token/#g-access-token-vs-refresh-token","title":"g. Access Token vs Refresh Token","text":"Access Token Refresh Token Digunakan untuk mengkases resource Digunakan untuk membuat access token baru Tidak disimpan di database Disimpan di database Punya waktu expired sedikit Punya waktu expired panjang"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/2.%20jwt_token/#h-best-practice-jwt","title":"h. Best Practice JWT","text":"<ul> <li>Jangan meletakan data sensitif di payload </li> <li>Expired time untuk access token tidak terlalu lama</li> <li>Gunakan refesh token untuk membuat access_token</li> <li>Jangan simpan access token di database Implentasi access token dan refeesh token bisa berbeda-beda pada setiap programmer</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/2.%20jwt_token/#2-membuat-token-dengan-jwt-json-web-token","title":"2. Membuat token dengan JWT (JSON Web Token)","text":"<p>Pada Pengujian sebelumnya kita sudah berhasil untuk login, namun ketika login kita belum memberikan token pada client untuk authentikasi yang akan disimpan di front end.</p> <p>Selanjutnya kita akan implentasikan jwt token pada project nestjs kita Pertama kita akan instalasi package jwt di nestJS</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/2.%20jwt_token/#a-instalasi-package","title":"a. Instalasi Package","text":"<pre><code>npm install @nestjs/passport passport passport-jwt\nnpm install -D @types/passport-jwt\nnpm install @nestjs/jwt\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/2.%20jwt_token/#b-membuat-jwt-config","title":"b. Membuat jwt config","text":"<p>Pada materi ini kita buat jwt config untuk menyimpan signature dari jwt pada aplikasi kita. Kita akan membuat pada folder config.</p> <p>src/config/jwt.config.ts</p> <pre><code>export const jwt_config = {\n  secret: \"belajar_jwt\",\n  expired: 3600,\n};\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/2.%20jwt_token/#c-import-module-jwt-ke-dalam-auth","title":"c. Import Module JWT ke dalam Auth","text":"<p>Selanjutkan kita import module jwt pda module auth agar pada module auth. Kita akan menggunakan method register dari JWT Module dengan konfigurasi seperti di bawah.</p> <pre><code>import { Module } from \"@nestjs/common\";\nimport { AuthController } from \"./auth.controller\";\nimport { AuthService } from \"./auth.service\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { Auth } from \"./auth.entity\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { JwtModule } from \"@nestjs/jwt\";\nimport { jwt_config } from \"src/config/jwt.config\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Auth]),\n    PassportModule.register({\n      defaultStrategy: \"jwt\",\n      property: \"user\",\n      session: false,\n    }),\n    JwtModule.register({\n      secret: jwt_config.secret,\n      signOptions: {\n        expiresIn: jwt_config.expired,\n      },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService],\n})\nexport class AuthModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/2.%20jwt_token/#d-membuat-interface-untuk-jwtpayload","title":"d. Membuat interface untuk jwtPayload","text":"<p>Kemudian kita buat interface JWT payload untuk menghindari kesalahan katika membuat payload untuk JWT Token.</p> <p>app/auth/auth.interface.ts</p> <pre><code>interface jwtPayload {\n  id: number;\n  nama: string;\n  email: string;\n}\n</code></pre> <p>auth.service.ts</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/2.%20jwt_token/#e-inject-jwtservice-pada-authservicets","title":"e. Inject jwtService pada auth.service.ts","text":"<p>Kita tinggal inject jwtService pada contructor auth service agar service jwt bisa digunakan di auth service.</p> <pre><code>constructor(\n    @InjectRepository(Auth) private readonly authRepository: Repository&lt;Auth&gt;,\n    private jwtService: JwtService, // panggil kelas jwt service\n  ) {\n    super();\n  }\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/2.%20jwt_token/#f-membuat-method-generate-jwt-pada-service","title":"f. Membuat method generate jwt pada service","text":"<p>Kita akan membuat method dengan nama generateJWT untuk membuat JWT Token dengan parameter waktu expire dan payload yang berisi <code>id</code>, <code>email</code>, <code>nama</code>.    Untuk membuat token kita bisa menggunakan method <code>sign</code> dari jwtService. </p> <pre><code> generateJWT(payload: jwtPayload, expiresIn: string | number) {\n    return this.jwtService.sign(payload, {\n      secret: jwt_config.secret,\n      expiresIn: expiresIn,\n    });\n  } //membuat method untuk generate jwt\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/2.%20jwt_token/#g-membuat-token-pada-saat-login-dengan-method-generatejwt","title":"g. Membuat Token pada saat Login dengan method generateJWT","text":"<p>Kita akan membuat access_token dan refresh token dan method generateJWT  ketika user login. Pada kasus ini kita akan berikan waktu exporire untum access_token selama 1 hari dan refresh_token selama 7 hari.</p> <pre><code>async login(payload: LoginDto): Promise&lt;ResponseSuccess&gt; {\n    const checkUserExists = await this.authRepository.findOne({\n      where: {\n        email: payload.email,\n      },\n      select: {\n        id: true,\n        nama: true,\n        email: true,\n        password: true,\n        refresh_token: true,\n      },\n    });\n\n    if (!checkUserExists) {\n      throw new HttpException(\n        'User tidak ditemukan',\n        HttpStatus.UNPROCESSABLE_ENTITY,\n      );\n    }\n\n    const checkPassword = await compare(\n      payload.password,\n      checkUserExists.password,\n    );\n    if (checkPassword) {\n      const jwtPayload: jwtPayload = {\n        id: checkUserExists.id,\n        nama: checkUserExists.nama,\n        email: checkUserExists.email,\n      };\n\n      const access_token = await this.generateJWT(jwtPayload, '1d');  //expired untuk access token adalah 1 hari dari ketika di buat\n      const refresh_token = await this.generateJWT(jwtPayload, '7d');//expired untuk access token adalah 7 hari dari ketika di buat\n      await this.authRepository.save({\n        refresh_token: refresh_token,\n        id: checkUserExists.id,\n      }); // simpan refresh token ke dalam tabel\n      return this._success('Login Success', {\n        ...checkUserExists,\n        access_token: access_token,  // tambakan access_token ketika return\n        refresh_token: refresh_token, // tambakan refresh_token ketika return\n      });\n    } else {\n      throw new HttpException(\n        'email dan password tidak sama',\n        HttpStatus.UNPROCESSABLE_ENTITY,\n      );\n    }\n  }\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/2.%20jwt_token/#htesting-pada-postman","title":"h.Testing pada Postman","text":"<p>Mengecek apakah payload sudah sesuai dengan yang kita inginkan di website https://jwt.io/.</p> <p>Silahkan copy <code>access_token</code> kemudian paste pada bagian encode</p> <p></p> <p>Silahkan cek pada bagian decode untuk melihat data apa saya yang ada pada jwt.</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/2.%20jwt_token/#2-impelementasi-authentication-guard","title":"2. Impelementasi Authentication Guard","text":"<p>Guard bertujuan untuk memproteksi suatu end point.</p> <p></p> <p>Seperti pada contoh gambar di atas, endpoint https://mysqmk.com/profile memerlukan jwt token / user yang sudah login untuk mengaksesnya, jika request dilakukan tanpa membawa token, maka backend akan meresponse dengan <code>Unauthorized</code>, sedangkan jika berhasil maka akan memberikan data yang di request.</p> <p>Pada materi ini kita akan  mengimpelentasikan guard pada nestjs.</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/2.%20jwt_token/#a-membuat-guard-pada-auth","title":"a. Membuat Guard pada Auth","text":"<p>Kita akan membuat file auth.guard.ts pada folder auth</p> <p>auth.guard.ts </p> <pre><code>import { ExecutionContext, UnauthorizedException } from '@nestjs/common';\n\nimport { AuthGuard } from '@nestjs/passport';\n\nexport class JwtGuard extends AuthGuard('jwt') {\n  canActivate(context: ExecutionContext) {\n    return super.canActivate(context);\n  }\n\n  handleRequest(err, user) {\n    if (err || !user) {\n      throw err || new UnauthorizedException();\n    }\n    return user;\n  }\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/2.%20jwt_token/#b-membuat-jwt-strategy-pada-auth","title":"b. Membuat JWT Strategy pada Auth","text":"<p>JWT strategy bertujuan untuk melakukan verifikasi token JWT yang dikirimkan oleh client dan menentukan apakan request akan diteruskan ke router handler atau tidak.</p> <p>jwt.strategy.ts</p> <pre><code>import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { jwt_config } from 'src/config/jwt.config';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(), \n      ignoreExpiration: false,\n      secretOrKey: jwt_config.secret,\n    });\n  }\n\n  async validate(payload: any) {\n    return payload;\n  }\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/2.%20jwt_token/#c-menambahkan-jwtstrategy-pada-providet-module-auth","title":"c. Menambahkan JwtStrategy pada Providet Module Auth","text":"<p>Karena jwt strategy memiliki decorator <code>@Injectable()</code> maka kita harus menambahkan JwtStrategy pada provider di auth module</p> <p>auth.module.ts</p> <pre><code>import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Auth } from './auth.entity';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwt_config } from 'src/config/jwt.config';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Auth]),\n    PassportModule.register({\n      defaultStrategy: 'jwt',\n      property: 'user',\n      session: false,\n    }),\n    JwtModule.register({\n      secret: jwt_config.secret,\n      signOptions: {\n        expiresIn: jwt_config.expired,\n      },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy], //tambahkan JWtStrategy pada provider\n})\nexport class AuthModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/2.%20jwt_token/#d-menambahkan-endpont-profile","title":"d. Menambahkan endpont Profile","text":"<p>Kita akan membuat endpoint yang hanya bisa diakses ketika user sudah login/membawa token saat request. Pada contoh ini , kita akan membuat endpoint profile dimana endpoint ini akan memberikan data profile user berdasarkan token yang dikirim. Jika token tidak dikirim di dalam header, maka request akan ditolak.</p> <p>auth.service.ts <pre><code>async myProfile(id: number): Promise&lt;ResponseSuccess&gt; {\n    const user = await this.authRepository.findOne({\n      where: {\n        id: id,\n      },\n    });\n\n    return this._success('OK', user);\n  }\n</code></pre> Pada kode di atas, kita membuat service untuk mencari profile berdasarkan id</p> <p>auth.controller.ts <pre><code>import { Controller, Post, Body, Get, UseGuards, Req } from '@nestjs/common'; //import UseGuard\nimport { LoginDto, RegisterDto } from './auth.dto';\nimport { AuthService } from './auth.service';\nimport { JwtGuard } from './auth.guard'; //import JwtGuard\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n  @Post('register')\n  async register(@Body() payload: RegisterDto) {\n    return this.authService.register(payload);\n  }\n\n  @Post('login')\n  async login(@Body() payload: LoginDto) {\n    return this.authService.login(payload);\n  }\n\n  @UseGuards(JwtGuard) // impelementasi guard pada route , hal ini berarti endpoint profile hanya bisa diakses jika client membawa token\n  @Get('profile')\n  async profile(@Req() req) {  // hasil validate dari jwt strategy akan ditambakan pada req.user. isi object req.user akan sama dengan payload dari jwt token. Silahkan coba console.log(req.user)\n    const { id } = req.user;\n    return this.authService.myProfile(id);\n  }\n}\n</code></pre></p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/2.%20jwt_token/#e-pengujian-pada-postman","title":"e. Pengujian Pada Postman","text":"<p>Pengujian Pertama,  Request tanpa membawa jwt token pada headers</p> <p></p> <p>Pengujian Kedua , Request dengan jwt token pada headers .</p> <p>Silahkan copy token yang ada pada access_token ketika berhasil login</p> <p></p> <p>Kemudian kita paste pada headers request pada endpont profile seperti pada gambar di bawah</p> <p></p> <p>Kemudian kita tes kembali request pada server</p> <p></p> <p>kita sudah berhasil untuk mengimplentasikan guard pada entpoint profile</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/3.%20lupa_password/","title":"C. Fitur Lupa Password","text":"<p>Pada Materi ini kita akan membahas bagaimana membuat fitur lupa password. Pada fitur ini biasanya backend akan mengirim link ke email untuk lupa password. </p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/3.%20lupa_password/#1-instalasi-package-nodemailer-dan-handlers","title":"1. Instalasi Package nodemailer dan handlers","text":"<p>Petama kita akan instalasi package nodemailer untuk mengirimkan email pada nodejs. <pre><code>npm install --save @nestjs-modules/mailer nodemailer\nnpm install --save-dev @types/nodemailer\nnpm install --save handlebars   // library JavaScript yang digunakan untuk memfasilitasi proses templating di sisi klien. Dengan menggunakan Handlebars.js, Anda dapat menggabungkan data dengan template HTML untuk menghasilkan output HTML yang lebih dinamis dan fleksibel\n</code></pre></p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/3.%20lupa_password/#2-membuat-fitur-mail","title":"2. Membuat Fitur Mail","text":"<pre><code>npx nest module app/mail\nnpx nest service app/mail\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/3.%20lupa_password/#3-membuat-akun-di-mailtrapio","title":"3. Membuat akun di mailtrap.io","text":"<p>Buatlah akun pada https://mailtrap.io/ untuk membuat smtp server dummy.  Pada proses development ini kita akan menggukan mailtrap untuk menerima email pada saat lupa password. Setelah membuat akun silakan buka url https://mailtrap.io/</p> <p></p> <p>Kemudian buka My Inbox dan pada bagian integrations pilih nodemailer</p> <p></p> <pre><code>var transport = nodemailer.createTransport({\nhost: \"sandbox.smtp.mailtrap.io\",\nport: 2525,\nauth: {\nuser: \"116b44e4fce785\",\npass: \"0a66404****\"\n}\n})\n</code></pre> <p>Pada kode di atas kita akan mendapatkan konfigurasi untuk nanti simpan di nestjs. Terlihat pada bagian pass ada *** untuk mendapatkan string lengkap nya silahkan kalian klik button copy di sebelah kanan.</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/3.%20lupa_password/#4-konfigurasi-mail-module","title":"4. Konfigurasi Mail Module","text":"<p>Konfigurasi mail module dengan konfigurasi yang kita dapatkan dari mailtrap.io</p> <p>mail.module.ts</p> <pre><code>import { MailerModule } from '@nestjs-modules/mailer';\nimport { HandlebarsAdapter } from '@nestjs-modules/mailer/dist/adapters/handlebars.adapter';\nimport { Module } from '@nestjs/common';\nimport { MailService } from './mail.service';\nimport { join } from 'path';\n@Module({\nimports: [\nMailerModule.forRoot({\ntransport: {\nhost: 'sandbox.smtp.mailtrap.io', //sesuaikan konfigurasi \nport: 2525,\nauth: {\nuser: '116b44e4fce785',  //sesuaikan user\npass: '0a66404e26**', //sesuaikan password \n},\n},\ndefaults: {\nfrom: '\"No Reply\" &lt;noreply@example.com&gt;',\n},\ntemplate: {\ndir: join(__dirname, 'templates'),  // template akan di ambil dari handlebar yang ada pada folder templates\nadapter: new HandlebarsAdapter(),\noptions: {\nstrict: true,\n},\n},\n}),\n],\nproviders: [MailService],\nexports: [MailService], // \ud83d\udc48 export  mailService agar bisa digunakan di luar module mail\n})\nexport class MailModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/3.%20lupa_password/#5-membuat-template-pada-mail","title":"5. Membuat template pada mail","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/3.%20lupa_password/#a-folder-templates","title":"a. Folder Templates","text":"<p>Langkah pertama adalah buatlah folder dengan nama templates pada folder mail seperti gambar dibawah.</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/3.%20lupa_password/#b-template-lupa-password","title":"b. Template Lupa Password","text":"<p>mail/templates/lupa_password.hbs</p> <pre><code>&lt;p&gt;Hey {{ name }},&lt;/p&gt;\n&lt;p&gt;Please click below to confirm your email&lt;/p&gt;\n&lt;p&gt;\n&lt;a  href=\"{{ link }}\"&gt;Klik&lt;/a&gt;\n&lt;/p&gt;\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/3.%20lupa_password/#c-konfigurasi-nest-clijson","title":"c. Konfigurasi nest-cli.json","text":"<p>Secara default NestJs hanya mendistibuskan mengcompile file .js dan .ts pada saat build. kita lihat bahwa template menggukaan extensi .hbs. Maka kita harus tambahkan konfiguasi pada nest-cli.json  agar nestjs dapat mendistibusikan .hbs.</p> <p>nest-cli.json</p> <pre><code>\"compilerOptions\": {\n\"assets\": [\"app/mail/templates/**/*\"],\n\"watchAssets\": true\n},\n</code></pre> <p>Tambahkan file di atas pada nest-cli.json, sehingga menjadi</p> <pre><code>{\n\"$schema\": \"https://json.schemastore.org/nest-cli\",\n\"collection\": \"@nestjs/schematics\",\n\"compilerOptions\": {\n\"assets\": [\"app/mail/templates/**/*\"],\n\"watchAssets\": true\n},\n\"sourceRoot\": \"src\"\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/3.%20lupa_password/#6-membuat-dto-reset-password","title":"6. Membuat DTO Reset Password","text":"<p>Membuat DTO MailResetPassword dan membuat method pada mail service</p> <p>mail.dto.ts</p> <p><pre><code>export class MailResetPasswordDto {\nlink: string;\nname: string;\nemail: string;\n}\n</code></pre> mail.service.ts</p> <pre><code>import { Injectable } from '@nestjs/common';\nimport { MailerService } from '@nestjs-modules/mailer'; //import MailerService\nimport { MailResetPasswordDto } from './mail.dto';\n@Injectable()\nexport class MailService {\nconstructor(private mailService: MailerService) {}\nasync sendForgotPassword(payload: MailResetPasswordDto) {\nawait this.mailService.sendMail({\nto: payload.email,\nsubject: 'Lupa Password', // subject pada email\ntemplate: './lupa_password',  // template yang digunakan adalah lupa_password, kita bisa memembuat template yang lain\ncontext: {\nlink: payload.link,\nname: payload.name,\n},\n});\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/3.%20lupa_password/#7-membuat-entity-reset-password","title":"7. Membuat Entity Reset Password","text":"<p>Kemudian kita akan membuat tabel reset_password untuk menyimpan user_id dan token dari lupa passwod.</p> <p>Buatlah file reset_password.entity.ts pada folder Auth</p> <p>reset_password.entity.ts <pre><code>import {\nEntity,\nBaseEntity,\nPrimaryGeneratedColumn,\nColumn,\nManyToOne,\nJoinColumn,\n} from 'typeorm';\nimport { User } from './auth.entity';\n@Entity()\nexport class ResetPassword extends BaseEntity {\n@PrimaryGeneratedColumn()\nid: number;\n@ManyToOne(() =&gt; User)  // relasikan many to one dengan table user\n@JoinColumn({ name: 'user_id' })\nuser: User;\n@Column({ nullable: true })\ntoken: string;\n@Column({ type: 'datetime', default: () =&gt; 'CURRENT_TIMESTAMP' })\ncreated_at: Date;\n@Column({ type: 'datetime', default: () =&gt; 'CURRENT_TIMESTAMP' })\nupdated_at: Date;\n}\n</code></pre></p> <p>Karena ada relasi dengan tabel user, maka kita akan update pada file auth.entity.ts</p> <pre><code>import {\nEntity,\nBaseEntity,\nPrimaryGeneratedColumn,\nColumn,\nManyToOne,\nJoinColumn,\nOneToMany,\n} from 'typeorm';\nimport { ResetPassword } from './reset_password.entity';\n@Entity()\nexport class User extends BaseEntity {\n@PrimaryGeneratedColumn()\nid: number;\n@Column({ nullable: true })\navatar: string;\n@Column({ nullable: false })\nnama: string;\n@Column({ unique: true, nullable: false })\nemail: string;\n@Column({ nullable: true })\npassword: string;\n@Column({ nullable: true })\nrefresh_token: string;\n@Column({ nullable: true })\nrole: string;\n@OneToMany(() =&gt; ResetPassword, (reset) =&gt; reset.user) // buat relasi one to many dengan tabel reset password\nreset_password: ResetPassword;\n@Column({ type: 'datetime', default: () =&gt; 'CURRENT_TIMESTAMP' })\ncreated_at: Date;\n@Column({ type: 'datetime', default: () =&gt; 'CURRENT_TIMESTAMP' })\nupdated_at: Date;\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/3.%20lupa_password/#8-import-entity-reset-password-di-auth-module","title":"8. Import Entity Reset Password di auth module","text":"<p>auth.module.ts</p> <pre><code>import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './auth.entity';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwt_config } from 'src/config/jwt.config';\nimport { JwtStrategy } from './jwt.strategy';\nimport { MailModule } from '../mail/mail.module';\nimport { ResetPassword } from './reset_password.entity';\n@Module({\nimports: [\nTypeOrmModule.forFeature([User, ResetPassword]),\nPassportModule.register({\ndefaultStrategy: 'jwt',\nproperty: 'user',\nsession: false,\n}),\nJwtModule.register({\nsecret: jwt_config.secret,\nsignOptions: {\nexpiresIn: jwt_config.expired,\n},\n}),\nMailModule, // import disini\n],\ncontrollers: [AuthController],\nproviders: [AuthService, JwtStrategy],\n})\nexport class AuthModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/3.%20lupa_password/#9-method-forgotpassword-pada-auth-service","title":"9. Method forgotPassword pada auth service","text":"<p>auth.service.ts</p> <pre><code>import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\n...\nimport { MailService } from '../mail/mail.service'; // import mail service\nimport { ResetPassword } from './reset_password.entity'; // import reset password\nimport { randomBytes } from 'crypto'; // import cypto untuk membuat token dari random string\n@Injectable()\nexport class AuthService extends BaseResponse {\nconstructor(\n@InjectRepository(User) private readonly authRepository: Repository&lt;User&gt;,\n@InjectRepository(ResetPassword) private readonly resetPasswordRepository: Repository&lt;ResetPassword&gt;,  // inject repository reset password\nprivate jwtService: JwtService,\nprivate mailService: MailService,\n) {\nsuper();\n}\nasync forgotPassword(email: string): Promise&lt;ResponseSuccess&gt; {\nconst user = await this.authRepository.findOne({\nwhere: {\nemail: email,\n},\n});\nif (!user) {\nthrow new HttpException(\n'Email tidak ditemukan',\nHttpStatus.UNPROCESSABLE_ENTITY,\n);\n}\nconst token = randomBytes(32).toString('hex'); // membuat token\nconst link = `http://localhost:5002/auth/reset-password/${user.id}/${token}`; //membuat link untuk reset password\nawait this.mailService.sendForgotPassword({\nemail: email,\nname: user.nama,\nlink: link,\n});\nconst payload = {\nuser: {\nid: user.id,\n},\ntoken: token,\n};\nawait this.resetPasswordRepository.save(payload); // menyimpan token dan id ke tabel reset password\nreturn this._success('Silahkan Cek Email');\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/3.%20lupa_password/#10-membuat-endpoint-reset-password-pada-auth-controller","title":"10. Membuat endpoint reset password pada auth controller","text":"<pre><code>@Post('lupa-password')\nasync forgotPassowrd(@Body('email') email: string) {\nconsole.log('email', email);\nreturn this.authService.forgotPassword(email);\n}\n</code></pre> <p>Membuat endpoint reset password pada auth controller</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/3.%20lupa_password/#11-pengujian-pada-postman","title":"11. Pengujian pada Postman","text":"<p>Kemudian cek pada mailtrap apakan email berhasil masuk atau tidak</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/4.%20reset_password/","title":"D.  Fitur Reset Password","text":"<p>Sebelumnya kita sudah berhasil mengirimkan link lupa password melalui email. kemudian user akan mengganti password menggunakan link tersebut. Kemudian pada materi ini kita akan membahas bagaimana membuat endpoint untuk lupa password</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/4.%20reset_password/#1-membuat-dto-dan-validasi-untuk-reset-password","title":"1. Membuat DTO dan validasi untuk reset password","text":"<p>Membuat DTO dan validasi untuk reset password</p> <p>auth.dto.ts</p> <pre><code>export class ResetPasswordDto {\n@IsString()\n@MinLength(8)\nnew_password: string;\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/4.%20reset_password/#2-membuat-service-pada-auth-service","title":"2. Membuat Service pada auth service","text":"<p>auth.service.ts</p> <pre><code>async resetPassword(\nuser_id: number,\ntoken: string,\npayload: ResetPasswordDto,\n): Promise&lt;ResponseSuccess&gt; {\nconst userToken = await this.resetPasswordRepository.findOne({    //cek apakah user_id dan token yang sah pada tabel reset password\nwhere: {\ntoken: token,\nuser: {\nid: user_id,\n},\n},\n});\nif (!userToken) {\nthrow new HttpException(\n'Token tidak valid',\nHttpStatus.UNPROCESSABLE_ENTITY,  // jika tidak sah , berikan pesan token tidak valid\n);\n}\npayload.new_password = await hash(payload.new_password, 12); //hash password\nawait this.authRepository.save({  // ubah password lama dengan password baru\npassword: payload.new_password,\nid: user_id,\n});\nawait this.resetPasswordRepository.delete({ // hapus semua token pada tabel reset password yang mempunyai user_id yang dikirim, agar tidak bisa digunakan kembali\nuser: {\nid: user_id,\n},\n});\nreturn this._success('Reset Passwod Berhasil, Silahkan login ulang');\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/4.%20reset_password/#3-membuat-endpoint-reset-password","title":"3. Membuat endpoint reset password","text":"<pre><code>// const link = `http://localhost:5002/auth/reset-password/${user.id}/${token}`;\n@Post('reset-password/:user_id/:token')  // url yang dibuat pada endpont harus sama dengan ketika kita membuat link pada service forgotPassword\nasync resetPassword(\n@Param('user_id') user_id: string,\n@Param('token') token: string,\n@Body() payload: ResetPasswordDto,\n) {\nreturn this.authService.resetPassword(+user_id, token, payload);\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/2.%20Authentication/4.%20reset_password/#3-pengujian-pada-postman","title":"3. Pengujian pada Postman","text":"<p>P Copy link yang didapat pada email dan paste pada postman</p> <p></p> <p>Seleteh berhasil , silakan coba login ulang dengan password baru</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/3.%20Konfigurasi/3.%20Konfigurasi/","title":"A. Global Configuration","text":"<p>Kita akan membahas dotenv, dimana file ini digunakan untuk memyimpan konfigurasi pada aplikasi kita. Kalau sebelum nya konfigurasi kita tulis secara hardcode pada koding seperti pada saat membuat konfig typeorm</p> <p>typeorm.config.ts</p> <pre><code>import { TypeOrmModuleOptions } from \"@nestjs/typeorm\";\nexport const typeOrmConfig: TypeOrmModuleOptions = {\ntype: \"mysql\",\nhost: \"localhost\",\nport: 3307, //port default 3306 lihat xampp\nusername: \"root\", // username default xampp root\npassword: \"root\", // password default xampp string kosong\ndatabase: \"belajar_nest_js\",\nentities: [\"dist/**/*.entity{.ts,.js}\"],\nsynchronize: true,\n};\n</code></pre> <p>cara di atas sangatlah tidak direkomentasikan diterapkan pada project karena konfigurasi dari database kita simpan di kodingan sehingga kurang aman dan kurang fleksibel. Solusi dari masalah ini kita bisa menggunakan file .env</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/3.%20Konfigurasi/3.%20Konfigurasi/#1-instalasi-packege-config","title":"1. Instalasi Packege Config","text":"<p>Pertama kita instalasi dulu package untuk config</p> <pre><code>npm i --save @nestjs/config\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/3.%20Konfigurasi/3.%20Konfigurasi/#2-import-module-config-pada-app-module","title":"2. Import Module Config pada app module","text":"<p>kita import pada app module sebagai global agar bisa diakses oleh semua module</p> <p>app.module.ts</p> <pre><code>import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { typeOrmConfig } from './config/typeorm.config';\nimport { AuthModule } from './app/auth/auth.module';\nimport { MailModule } from './app/mail/mail.module';\nimport { ConfigModule } from '@nestjs/config';\n@Module({\nimports: [\nConfigModule.forRoot({\nisGlobal: true,  // konfigurasi is global untuk semua module\n}),\nTypeOrmModule.forRoot(typeOrmConfig),\nAuthModule,\nMailModule,\n],\ncontrollers: [AppController],\nproviders: [AppService],\n})\nexport class AppModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/3.%20Konfigurasi/3.%20Konfigurasi/#3-buat-file-env","title":"3.  Buat File .env","text":"<p>buatlah file .env</p> <p></p> <pre><code>DB_HOST = localhost\nDB_USERNAME = root\nDB_PASSWORD = root\nDB_DATABASE = belajar_nest_js\nDB_PORT = 3307\n//JWT\nJWT_SECRET = belajar_jwt\nJWT_EXPIRED = 3600\n//MAIL\nMAIL_HOST = sandbox.smtp.mailtrap.io\nMAIL_PORT = 2525\nMAIL_USER = 116b44e4fce785\nMAIL_PASS = 0a66404e****** // sesuaikan dengan mail password\nBASE_CLIENT_URL = http://localhost:5002\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/3.%20Konfigurasi/3.%20Konfigurasi/#4-implentasi","title":"4. Implentasi","text":"<p>Setelah kita membuat dotenv, selanjutnya kita akan lakuka penyesuai pada file-file barikut.</p> <p>jwt.config.ts</p> <p><pre><code>export const jwt_config = {\nsecret: process.env.JWT_SECRET,\nexpired: process.env.JWT_EXPIRED,\n};\n</code></pre> typeorm.config.ts</p> <pre><code>import { TypeOrmModuleOptions } from '@nestjs/typeorm';\nexport const typeOrmConfig: TypeOrmModuleOptions = {\ntype: 'mysql',\nhost: process.env.DB_HOST,\nport: Number(process.env.DB_PORT), //port default 3306 lihat xampp\nusername: process.env.DB_USERNAME, // username default xampp root\npassword: process.env.DB_PASSWORD, // password default xampp string kosong\ndatabase: process.env.DB_DATABASE,\nentities: ['dist/**/*.entity{.ts,.js}'],\nsynchronize: true,\n};\n</code></pre> <p>mail.module.ts</p> <pre><code>import { MailerModule } from '@nestjs-modules/mailer';\nimport { HandlebarsAdapter } from '@nestjs-modules/mailer/dist/adapters/handlebars.adapter';\nimport { Module } from '@nestjs/common';\nimport { MailService } from './mail.service';\nimport { join } from 'path';\n@Module({\nimports: [\nMailerModule.forRoot({\ntransport: {\nhost: process.env.MAIL_HOST,\nport: Number(process.env.MAIL_PORT),\nauth: {\nuser: process.env.MAIL_USER,\npass: process.env.MAIL_PASS,\n},\n},\ndefaults: {\nfrom: '\"No Reply\" &lt;noreply@example.com&gt;',\n},\ntemplate: {\ndir: join(__dirname, 'templates'),\nadapter: new HandlebarsAdapter(),\noptions: {\nstrict: true,\n},\n},\n}),\n],\nproviders: [MailService],\nexports: [MailService], // \ud83d\udc48 export for DI\n})\nexport class MailModule {}\n</code></pre> <p>auth.service.ts <pre><code>async forgotPassword(email: string): Promise&lt;ResponseSuccess&gt; {\nconst user = await this.authRepository.findOne({\nwhere: {\nemail: email,\n},\n});\nif (!user) {\nthrow new HttpException(\n'Email tidak ditemukan',\nHttpStatus.UNPROCESSABLE_ENTITY,\n);\n}\nconst token = randomBytes(32).toString('hex');\nconst link = `${process.env.BASE_CLIENT_URL}/auth/reset-password/${user.id}/${token}`; // sesuaikan client url\nawait this.mailService.sendForgotPassword({\nemail: email,\nname: user.nama,\nlink: link,\n});\nconst payload = {\nuser: {\nid: user.id,\n},\ntoken: token,\n};\nawait this.resetPasswordRepository.save(payload);\nreturn this._success('Silahkan Cek Email');\n}\n</code></pre></p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/4.%20Fitur%20Kategori/","title":"A. CRUD Kategori","text":"<p>Pada materi ini, kita akan membuat endpoint untuk CRUD untuk  pada table kategori</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/4.%20Fitur%20Kategori/#1-membuat-module-controller-service","title":"1. Membuat Module, Controller, Service","text":"<pre><code>npx nest g module app/kategori\nnpx nest g controller app/kategori\nnpx nest g service app/kategori\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/4.%20Fitur%20Kategori/#2-membuat-kategorientityts","title":"2. Membuat kategori.entity.ts","text":"<pre><code>import {\nBaseEntity,\nColumn,\nEntity,\nJoinColumn,\nManyToOne,\nPrimaryGeneratedColumn,\n} from 'typeorm';\nimport { User } from '../auth/auth.entity';\n@Entity()\nexport class Kategori extends BaseEntity {\n@PrimaryGeneratedColumn()\nid: number;\n@Column({ nullable: false })\nnama_kategori: string;\n@ManyToOne(() =&gt; User)\n@JoinColumn({ name: 'created_by' })   //buat relasi many to one  dengan table user\ncreated_by: User;\n@ManyToOne(() =&gt; User)\n@JoinColumn({ name: 'updated_by' })  //buat relasi many to one  dengan table user\nupdated_by: User;\n@Column({ type: 'datetime', default: () =&gt; 'CURRENT_TIMESTAMP' })\ncreated_at: Date;\n@Column({ type: 'datetime', default: () =&gt; 'CURRENT_TIMESTAMP' })\nupdated_at: Date;\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/4.%20Fitur%20Kategori/#3-perbaharui-authentityts","title":"3. Perbaharui auth.entity.ts","text":"<p>Karena terdapat relasi antara tabel user dan kategori maka kita tambahkan relasi oneToMany dari auth ke kategori.</p> <pre><code>import {\nEntity,\nBaseEntity,\nPrimaryGeneratedColumn,\nColumn,\nManyToOne,\nJoinColumn,\nOneToMany,\n} from 'typeorm';\nimport { ResetPassword } from './reset_password.entity';\nimport { Kategori } from '../kategori/kategori.entity';\n@Entity()\nexport class User extends BaseEntity {\n@PrimaryGeneratedColumn()\nid: number;\n@Column({ nullable: true })\navatar: string;\n@Column({ nullable: false })\nnama: string;\n@Column({ unique: true, nullable: false })\nemail: string;\n@Column({ nullable: true })\npassword: string;\n@Column({ nullable: true })\nrefresh_token: string;\n@Column({ nullable: true })\nrole: string;\n@OneToMany(() =&gt; ResetPassword, (reset) =&gt; reset.user)\nreset_password: ResetPassword;\n@OneToMany(() =&gt; Kategori, (v) =&gt; v.created_by) // relasi dengan table kategori\ncreated_by: Kategori;\n@OneToMany(() =&gt; Kategori, (v) =&gt; v.updated_by) // relasi dengan table kategori\nupdated_by: Kategori;\n@Column({ type: 'datetime', default: () =&gt; 'CURRENT_TIMESTAMP' })\ncreated_at: Date;\n@Column({ type: 'datetime', default: () =&gt; 'CURRENT_TIMESTAMP' })\nupdated_at: Date;\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/4.%20Fitur%20Kategori/#4-membuat-dto-pada-fitur-kategori","title":"4. Membuat DTO pada fitur kategori","text":"<p>kategori.dto.ts</p> <pre><code>import { OmitType } from '@nestjs/mapped-types';\nimport { IsInt, IsOptional, IsString } from 'class-validator';\nimport { PageRequestDto } from 'src/utils/dto/page.dto';\nexport class KategoriDto {\n@IsInt()\nid: number;\n@IsString()\nnama_kategori: string;\n}\nexport class CreateKategoriDto extends OmitType(KategoriDto, ['id']) {}\nexport class UpdateKategoriDto extends KategoriDto {}\nexport class findAllKategori extends PageRequestDto {\n@IsString()\n@IsOptional()\nnama_kategori: string;\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/4.%20Fitur%20Kategori/#5-tambahkan-filteror-pada-base-response","title":"5. Tambahkan filterOR pada Base Response","text":"<p>Kita akan membuat propery filterOr pada base response agar ketika service membutuhkan tidak harus membuat ulang mendefinikan type data nya.</p> <p>utils/response/base.response.ts</p> <pre><code>import { ResponseSuccess, ResponsePagination } from 'src/interface/response';\nclass BaseResponse {\nfilterOr: {           //buat bagian ini, untuk mencegah pembuatan object awal dari filterOr secara berulang\n[key: string]: any;\n} = {};\n_success(message: string, data?: any): ResponseSuccess {\nreturn {\nstatus: 'Success',\nmessage: message,\ndata: data || {},\n};\n}\n_pagination(\nmessage: string,\ndata: any,\ntotalData: number,\npage: number,\npageSize: number,\n): ResponsePagination {\nreturn {\nstatus: 'Success',\nmessage: message,\ndata: data,\npagination: {\ntotal: totalData,\npage: page,\npageSize: pageSize,\n},\n};\n}\n}\nexport default BaseResponse;\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/4.%20Fitur%20Kategori/#6-fitur-menambah-kategori-dan-menampilkan-kategori","title":"6. Fitur Menambah Kategori dan Menampilkan Kategori","text":"<p>Pada materi ini, kita akan membuat Fitur untuk, </p> <ul> <li>Menambakan kategori (CREATE)</li> <li>Menampilkan data pada tabel kategori dengan Pagination dan filter berdasarkan nama kategori</li> </ul> <p>kategori.service.ts</p> <pre><code>import { HttpException, HttpStatus, Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport BaseResponse from 'src/utils/response/base.response';\nimport { Kategori } from './kategori.entity';\nimport { CreateKategoriDto, findAllKategori } from './kategori.dto';\nimport { ResponsePagination, ResponseSuccess } from 'src/interface/response';\nimport { Like, Repository } from 'typeorm';\nimport { REQUEST } from '@nestjs/core';\n@Injectable()\nexport class KategoriService extends BaseResponse {\nconstructor(\n@InjectRepository(Kategori)\nprivate readonly kategoriRepository: Repository&lt;Kategori&gt;,\n@Inject(REQUEST) private req: any,  // inject request agar bisa mengakses req.user.id dari  JWT token pada service\n) {\nsuper();\n}\nasync create(payload: CreateKategoriDto): Promise&lt;ResponseSuccess&gt; {\ntry {\nawait this.kategoriRepository.save({\n...payload,\ncreated_by: {\nid: this.req.user.id,\n},\n});\nreturn this._success('OK', this.req.user.user_id);\n} catch {\nthrow new HttpException('Ada Kesalahan', HttpStatus.UNPROCESSABLE_ENTITY);\n}\n}\nasync getAllCategory(query: findAllKategori): Promise&lt;ResponsePagination&gt; {\nconst { page, pageSize, limit, nama_kategori } = query;\nconst filterQuery = this.filterOr;  // Gunakan propery filterOr dari base response\nif (nama_kategori) {\nfilterQuery.nama_kategori = Like(`%${nama_kategori}%`);\n}\nconst total = await this.kategoriRepository.count({\nwhere: filterQuery,\n});\nconst result = await this.kategoriRepository.find({\nwhere: filterQuery,\nrelations: ['created_by', 'updated_by'], // relasi yang aka ditampilkan saat menampilkan list kategori\nselect: {   // pilih data mana saja yang akan ditampilkan dari tabel kategori\nid: true,\nnama_kategori: true,\ncreated_by: {   \nid: true,   // pilih field  yang akan ditampilkan dari tabel user\nnama: true,\n},\nupdated_by: {\nid: true, // pilih field yang akan ditampilkan dari tabel user\nnama: true,\n},\n},\nskip: limit,\ntake: pageSize,\n});\nreturn this._pagination('OK', result, total, page, pageSize);\n}\n}\n</code></pre> <p>kategori.controller.ts</p> <pre><code>import { Body, Controller, Get, Post, UseGuards } from '@nestjs/common';\nimport { KategoriService } from './kategori.service';\nimport { CreateKategoriDto, findAllKategori } from './kategori.dto';\nimport { JwtGuard } from '../auth/auth.guard';\nimport { Pagination } from 'src/utils/decorator/pagination.decorator';\n@UseGuards(JwtGuard) //  implementasikan global guard pada semua endpont kategori memerlukan authentikasi saat request\n@Controller('kategori')\nexport class KategoriController {\nconstructor(private kategoriService: KategoriService) {}\n@Post('create')\nasync create(@Body() payload: CreateKategoriDto) {\nreturn this.kategoriService.create(payload);\n}\n@Get('list')\nasync getAllCategory(@Pagination() query: findAllKategori) {  //gunakan custom decorator yang pernah kita buat\nreturn this.kategoriService.getAllCategory(query);\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/4.%20Fitur%20Kategori/#7pengujian-pada-postman","title":"7.Pengujian pada Postman","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/4.%20Fitur%20Kategori/#a-testing-create-kategoti-pada-postman","title":"a. Testing create kategoti pada postman","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/4.%20Fitur%20Kategori/#b-testing-list-kategori-tanpa-filter","title":"b. Testing list kategori tanpa filter","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/4.%20Fitur%20Kategori/#c-testing-list-kategori-dengan-filter-nama_kategori","title":"c. Testing list kategori dengan filter nama_kategori","text":"<p>Untuk Update, BulkCreate, Detail dam Delete Silahkan dikerjakan sebagai tugas, Semangat.</p> <p>Note</p> <p>Lihat contoh pada materi typeorm basic</p>"}]}